{
  "name": "Coloredlist",
  "tagline": "A Tornado Tutorial App",
  "body": "### Table of Contents\r\n\r\n* [Introduction](#introduction)\r\n* [Getting Started](#getting-started)\r\n  * [Virtual Environment](#virtual-environment)\r\n  * [Installing Packages](#installing-packages)\r\n* [Creating the App](#creating-the-app)\r\n  * [The Main Application](#the-main-application)\r\n  * [Templates](#templates)\r\n* [Creating the List](#creating-the-list)\r\n  * [List URL Mapping](#list-url-mapping)\r\n  * [In Memory Storage](#in-memory-storage)\r\n  * [Import UUID](#import-uuid)\r\n  * [List Template](#list-template)\r\n  * [List Handler](#list-handler)\r\n* [Edit and Delete List Items](#edit-and-delete-list-items)\r\n  * [List Item URL Mapping](#list-item-url-mapping)\r\n  * [List Item Handler](#list-item-handler)\r\n  * [Importing Javascript](#importing-javascript)\r\n  * [Edit Template](#edit-template)\r\n  * [AJAX](#ajax)\r\n* [Persistent Storage](#persistent-storage)\r\n  * [pymongo](#pymongo)\r\n  * [Setting Up Database](#setting-up-database)\r\n  * [Make Database](#make-database)\r\n  * [Using Database](#using-database)\r\n  * [List Template with New Data Structure](#list-template-with-new-data-structure)\r\n* [Structuring the App](#structuring-the-app)\r\n  * [Static Content](#static-content)\r\n  * [Template Inheritance](#template-inheritance)\r\n  * [Handlers Module](#handlers-module)\r\n  * [App Settings](#app-settings)\r\n  * [DB Settings](#db-settings)\r\n  * [URL Patterns](#url-patterns)\r\n  * [Final Structure](#final-structure)\r\n\r\n\r\n# Introduction\r\n\r\nThis is a prototype as part of learning Tornado framework. The idea and design of the app is based off [here](https://css-tricks.com/app-from-scratch-1-design/).\r\n\r\nI will attempt to write the README in tutorial style, as how I taught myself doing it from various sources.\r\n\r\nI will also try to commit the README and source code in accordance to the progress of the application.\r\n\r\nHopefully this will make it easier to follow the README and source code at different stages.\r\n\r\n*Please feel free to file issues regarding the README if you find something inaccurate or unclear about the explanation. This is my first time writing a public tutorial and I have a lot to learn from anyone of you who care enough to read this. Thank you so much for your support.*\r\n\r\n*Also, please do file issues regarding the actual source code if you find the code does not comply with certain standards or if improvements are needed. I am still new to python and there will surely be coding style which I have not followed.*\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Getting Started\r\n\r\n## Virtual Environment\r\n\r\nAs this is a python-based app, it is recommended to use `virtualenv` to contain the necessary packages for this project only.\r\n\r\nRun `pip install virtualenv` to install `virtualenv` if you don't already have the package.\r\n\r\nIn the directory you have created for this project, run the command `virtualenv venv` to create the directory for the new environment. Replace `venv` with any name you wish.\r\n\r\n*If you want to use python3 for the project, run `virtualenv -p python3 venv` instead. Make sure you already have python3 installed.*\r\n\r\nTo activate the environment, run the command `. venv/bin/activate` in the directory you have created `venv` directory.\r\n\r\nYou should see that your command prompt has `(venv)` in the prefix.\r\n\r\nYou can read more about `virtualenv` [here](https://virtualenv.readthedocs.org).\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Installing Packages\r\n\r\nThe packages required for getting started with developing this app is included in the `requirements.txt` file.\r\n\r\nRun `pip install -r requirements.txt` to install the packages.\r\n\r\nYou can read more about python package installation [here](https://pip.pypa.io/en/stable/user_guide/).\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Creating the App\r\n\r\n## The Main Application\r\n\r\nWe will start with a `app.py` file, which contains the basics of the application we want to create.\r\n\r\nFor now, we will not care about the application structure. Our goal here is just to get it to work.\r\n\r\nWe need to import some packages from the `tornado` framework.\r\n\r\n```\r\nimport tornado.ioloop\r\nimport tornado.web\r\nfrom tornado.web import url\r\n```\r\n\r\nWe will use a function to create the application instead of writing it directly in the main code.\r\n\r\n```\r\ndef make_app():\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n    ],\r\n    debug=True)\r\n```\r\n\r\nWe first define the main page URL and its handler. Whenever the client requests for `http://server:port/`, the `MainHandler` will handle the request and send the appropriate response.\r\n\r\nThe `debug=True` setting is to run the application in debug mode.\r\n\r\nNow we will define the `MainHandler`.\r\n\r\n```\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        self.write('''<!DOCTYPE html>    \r\n                    <html>\r\n                    <head>\r\n                        <title>Colored List App</title>\r\n                    </head>\r\n                    <body>\r\n                        <div id=\"page-wrap\">\r\n                            <div id=\"header\">\r\n                                <h1><a href=\"/\">Colored List App</a></h1>\r\n                                <div id=\"control\">\r\n                                    <p><a href=\"/logout\" class=\"button\">Log Out</a>&nbsp;<a href=\"/account\" class=\"button\">Your Account</a></p>\r\n                                    <p><a href=\"/signup\" class=\"button\">Sign Up</a>&nbsp;<a href=\"/login\" class=\"button\">Log In</a></p>\r\n                                </div>\r\n                            </div>\r\n                            <div id=\"ribbon\">\r\n                                Reminders\r\n                                <ul>\r\n                                    <li>Your list automatically saves</li>\r\n                                    <li>Double-click list items to edit them</li>\r\n                                </ul>\r\n                            </div>\r\n                            <div id=\"main\">\r\n                            </div>\r\n                        </div>\r\n                    </body>\r\n                    </html>''')\r\n```\r\n\r\nWhen the client requests for `http://server:port/`, it will be sent as a `GET` request, so this will be handled by the `MainHandler`'s `get` function.\r\n\r\nWe will serve a HTML page as the response.\r\n\r\nNotice that I have injected some CSS classes and defined some IDs in the HTML elements. We will come to styling later.\r\n\r\nIn order for the server to run, we need to define the main entry code.\r\n\r\n```\r\nif __name__ == '__main__':\r\n    app = make_app()\r\n    app.listen(9080)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\nWe need to create an instance of the application by calling the `make_app()` function. Then I make it listen to port 9080. You can choose whichever port you wish.\r\n\r\nThe server is started by `tornado.ioloop.IOLoop.current().start()`.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Templates\r\n\r\nIt is a little messy to write the HTML code directly in the `MainHandler`'s `get` function. We will try to take this code out into a proper HTML file, and get the handler to render the HTML file.\r\n\r\nWe first create the `main.html` file and put the exact HTML code into this file.\r\n\r\n```\r\n<!DOCTYPE html>    \r\n<html>\r\n<head>\r\n    <title>Colored List App</title>\r\n</head>\r\n<body>\r\n    <div id=\"page-wrap\">\r\n        <div id=\"header\">\r\n            <h1><a href=\"/\">Colored List App</a></h1>\r\n            <div id=\"control\">\r\n                <p><a href=\"/logout\" class=\"button\">Log Out</a>&nbsp;<a href=\"/account\" class=\"button\">Your Account</a></p>\r\n                <p><a href=\"/signup\" class=\"button\">Sign Up</a>&nbsp;<a href=\"/login\" class=\"button\">Log In</a></p>\r\n            </div>\r\n        </div>\r\n        <div id=\"ribbon\">\r\n            Reminders\r\n            <ul>\r\n                <li>Your list automatically saves</li>\r\n                <li>Double-click list items to edit them</li>\r\n            </ul>\r\n        </div>\r\n        <div id=\"main\">\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n```\r\n\r\nTo render this HTML file, we use the `render` method of the `RequestHandler` class.\r\n\r\nWe replace the `get` method we wrote earlier with the following:\r\n\r\n```\r\ndef get(self):\r\n    self.render(\"main.html\")\r\n```\r\n\r\nNow the code looks much cleaner as we separate the view out of the logic code.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Creating the List\r\n\r\nWe now have a basic structure application. It's time to start creating the list itself.\r\n\r\nWe will start with just 2 simple functionalities for the list.\r\n* View the list\r\n* Create a list item\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List URL Mapping\r\n\r\nFor each of the functionalities above, we will design endpoints for the client to send the requests to.\r\n\r\nIn the `make_app()` method we created earlier, we will add a few more `URLSpec` objects for each endpoint.\r\n\r\n```\r\ndef make_app():\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/create\", ListHandler),\r\n        url(r\"/list\", ListHandler),\r\n    ],\r\n    debug=True)\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## In Memory Storage\r\n\r\nFor the time being, we will not use a persistent database for storage. Instead, we will create a in-memory storage for our list items.\r\n\r\nWe will come to using persistent storage at a later stage. For now, our purpose is to get the logic working.\r\n\r\nWe declare a global variable `list_items` that we will use as a in-memory storage for all the list items.\r\n\r\nWe will define it as a dictionary where the item ID will be the key and the item definition is another dictionary that forms the value paired with the key.\r\n\r\n```\r\nlist_items = {\r\n    \"1\":{\"id\":\"1\",\"text\":\"Walk the dog\",\"color\":\"Red\"},\r\n    \"2\":{\"id\":\"2\",\"text\":\"Pick up dry cleaning\",\"color\":\"Blue\"},\r\n    \"3\":{\"id\":\"3\",\"text\":\"Milk\",\"color\":\"Green\"},\r\n}\r\n```\r\n\r\nWe initialize some data first that we can display in the front-end.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Import UUID\r\n\r\nFor the purpose of using `uuid` to generate a unique ID for each item, we need to remember to import the `uuid` module.\r\n\r\n```\r\nimport uuid\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Template\r\n\r\nTo help us visualize the data, let's create the `list.html` template file first.\r\n\r\n```\r\n<ul>\r\n{% for item_id in items %}\r\n    <li class=\"{{ items[item_id][\"color\"] }}\">\r\n        <span>{{ items[item_id]['text'] }}</span>\r\n    </li>\r\n{% end %}\r\n</ul>\r\n\r\n<form action=\"/list/create\" method=\"post\">\r\n    <div>\r\n        <input type=\"text\" id=\"new-list-item-text\" name=\"text\">\r\n        <input type=\"submit\" id=\"new-item-submit\" value=\"Add\" class=\"button\">\r\n    </div>\r\n</form>\r\n```\r\n\r\nNotice something different is happening in this template. We have injected some python code in this template to help us display the list items.\r\n\r\nSince we are going to have a list of items, it is logical to have a loop control to display each item. This is where we use the `{% for item_id in items %}` construct.\r\n\r\nIn our in-memory store, we use the item ID as the key for the item definition itself, so in order to access the item data, we will need to get the item dictionary and then the attribute.\r\n\r\nFor example, we will use `{{ items[item_id][\"text\"] }}` to retrieve the text of the item with a specific `item_id`.\r\n\r\nWe have not added all the `<head>` and `<body>` tags in this template, because we are going to make use of template inheritance later.\r\n\r\nFor now we just want to make sure the data are displayed correctly with this structure.\r\n\r\nThis template should display a list of items in storage, and also provide a form to allow creating a new item which will be added to the in-memory storage.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Handler\r\n\r\nWe will not use the `MainHandler` for handling requests pertaining to the list. Instead, we will create a new `ListHandler` class for this purpose.\r\n\r\nFor each of the functionalities, we assign a method in the `ListHandler` according to the HTTP method we allow for access.\r\n\r\n```\r\nclass ListHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        self.render(\"list.html\", items=list_items)\r\n\r\n    def post(self):\r\n        text = self.get_body_argument(\"text\")\r\n        item_id = str(uuid.uuid4())\r\n        list_items[item_id] = {\"id\":item_id,\"text\":text,\"color\":\"Blue\"}\r\n        self.redirect(\"/list\")\r\n```\r\nAs the client requests for `http://server:port/list`, the `ListHandler`'s `get` method will render the `list.html` page.\r\n\r\nIf the client enters some text in the form and hit the `Add` button, it will send a `POST` request containing the form data. The `ListHandler`'s `post` method will handle this request.\r\n\r\nFirst we will extract the text entered by the client by calling `self.get_body_argument(\"text\")`. Note that all form data are accessible by `self.get_body_argument` method by passing in the input name as the method parameter.\r\n\r\nWe will auto-generate a unique ID for this item by using `uuid.uuid4()` method.\r\n\r\nThen we create a new dictionary containing all the item data and add it to the in-memory `list_items` storage using the `item_id` as key.\r\n\r\nOnce we are done with the storage, we will redirect to the `/list` page so that the changes can be reflected to the user.\r\n\r\nWe will realize that the list items are not sorted according to the order they are created. For that, we will need to devise some data strucutre and logic to handle the sorting later.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Edit and Delete List Items\r\n\r\nA list without the edit or delete functions are almost useless. We will now add these functionalities to our list.\r\n\r\nThere can be a few ways to approach this problem.\r\n\r\n1. Continue using `ListHandler` and add the corresponding `put` and `delete` methods for editing and deleting list items.\r\n2. Create a separate `ListItemEditHandler` and `ListItemDeleteHandler` for editing and deleting list items.\r\n\r\nThe first approach will be more compact due to having only a single handler. The methods also clearly reflects the purpose of the request, mapping edit to `put` and delete to `delete` methods.\r\n\r\nHowever, we cannot simply use a form for editing and deleting, because HTML `<form>` does not support `put` and `delete` methods. We will need to use AJAX for these actions.\r\n\r\nThe second approach is more lengthy due to having to create 2 more handlers just for each of the actions.\r\n\r\nHowever, we can easily use a form to send a `post` request for each actions, and map to a `post` method within each handler.\r\n\r\nPersonally, I would prefer doing the first approach. I only need to main a single handler, while having the advantage of mapping the actions correctly to the methods: edit to `put` and delete to `delete`.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Item URL Mapping\r\n\r\nFor using the first approach, we will map the request URL as follows:\r\n\r\n```\r\nurl(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler),\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Item Handler\r\n\r\nSince it is an edit action, we will map it to the `put` method of the `ListHandler`.\r\n\r\n```\r\ndef put(self, item_id):\r\n    text = self.get_body_argument(\"text\")\r\n    item = None\r\n    try:\r\n        item = list_items[item_id]\r\n    except KeyError:\r\n        self.set_status(404)\r\n        self.finish(\"Not found\")\r\n        return\r\n    if item:\r\n        item[\"text\"] = text\r\n    self.set_status(200)\r\n    self.finish(\"OK\")\r\n    return\r\n```\r\n\r\nThe `item_id` is already provided as a path argument. We only need to extract the `text` data from the request body by calling `self.get_body_argument` method.\r\n\r\nTo do a little error handling, we will try to get the item data from the `list_items` dictionary, while catching `KeyError`.\r\n\r\nIf `KeyError` is raised, then we will return a status of `404` and message `Not found` to inform the client of the error.\r\n\r\nIf the item is found, then we just overwrite the `text` value.\r\n\r\nAt the end of it, we will return a status of `200` and message `OK` to inform the client that the edit is done.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Importing Javascript\r\n\r\nWe can write plain Javascript for the AJAX calls, but I decide that it is best to use existing libraries to make our life easier.\r\n\r\nWe will use jQuery to help with handling the AJAX calls, so we will include this following code in the `list.html` file.\r\n\r\n```\r\n<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\" integrity=\"sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=\" crossorigin=\"anonymous\"></script>\r\n```\r\n\r\nWe will add this `<script>` tag at the end of the page so that it does not slow down the page loading.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Edit Template\r\n\r\nThen, we will need to cater for editing by changing the `list.html` file. Previously we have a simple `<span>{{ items[item_id]['text'] }}</span>` to display the item text. Now we need to make it editable.\r\n\r\n```\r\n<span><input type=\"hidden\" id=\"edit-item-{{ item_id }}-id\" value=\"{{ item_id }}\"><input type=\"text\" id=\"edit-item-{{ item_id }}-text\" name=\"text\" value=\"{{ items[item_id]['text'] }}\"><a href=\"#\" id=\"edit-item-{{ item_id }}-submit\" class=\"button edit-button\">Edit</a></span>\r\n```\r\n\r\nWe have added a hidden field to store the `item_id`, put the item text in a text input field and created a link to submit the edit action.\r\n\r\nNote that we have created a unique ID for each input field as there may be multiple of such fields in the same list.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## AJAX\r\n\r\nNow we have the fields ready, we need to add in the logic to send the data to the server.\r\n\r\nBelow the `<script>` tag that imports the jQuery source, we will create our customized Javascript that will perform the AJAX call.\r\n \r\n```\r\n<script type=\"text/javascript\">\r\n<script type=\"text/javascript\">\r\n$(document).ready(function() {\r\n    $('.edit-button').click(function() {\r\n        var itemSpan = $(this).parent();\r\n        var itemId = $(itemSpan).find(\"input[type='hidden']\").val();\r\n        var text = $(itemSpan).find(\"input[name='text']\").val();\r\n        var url = \"/list/\" + itemId + \"/edit\";\r\n        console.log(url);\r\n        $.ajax({\r\n            type: \"PUT\",\r\n            url: url,\r\n            dataType: \"json\",\r\n            data: {\"id\": itemId, \"text\": text},\r\n            statusCode: {\r\n                200: function(xhr) {\r\n                    alert(\"Item updated successfully\");\r\n                },\r\n                404: function(xhr) {\r\n                    alert(\"Item ID not found\");\r\n                },\r\n            },\r\n        });\r\n    });\r\n});\r\n</script>\r\n```\r\n\r\nThere is quite a lot going on in this segment of code.\r\n\r\nFirst, we attach the `click` event to all the elements with the class `edit-button`. In this case, it will be all the `<a>` tags for each list item.\r\n\r\nOnce the `click` event is triggered, we will try to extract the data we require.\r\n\r\nWe get the parent `<span>` containing the `<a>` being clicked. This allows us to extract the element containing the `item_id` and `text` of the item.\r\n\r\nOnce we have these data, we can now construct the URL and data for the AJAX call.\r\n\r\nSince we have defined a `put` method in the `ListHandler` to handle the edit function, we will set the call type to `PUT`. The data will be sent as a `json` data type and the data itself is constructed using the values from the input fields.\r\n\r\nOnce the server returns a response, we will display an alert to inform the status.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Persistent Storage\r\n\r\nSo far we have been using a in-memory storage for our list items. For this application to be useful, we need to persist the list data so that users can re-visit the list another day and the data will still be available.\r\n\r\nNow we will look at how to integrate persistent storage in the application.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## pymongo\r\n\r\nThere are a few databases that we can use for our application. I have chosen [MongoDB](https://www.mongodb.org/) for the simple reason that I want to learn how to use a NoSQL database. Please visit the official docs to learn how to setup a MongoDB instance on your machine for testing purpose.\r\n\r\nIn order to use Tornado with MongoDB, we need to have a database driver called [pymongo](http://api.mongodb.org/python/current/index.html).\r\n\r\nWe will add `pymongo==3.2.2` to our `requirements.txt` file so that we can install the module using pip.\r\n\r\nAfter adding this line, don't forget to run the command `pip install -r requirements.txt` so that the pymongo package is installed.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Setting Up Database\r\n\r\nAfter installing MongoDB and pymongo, we need to setup the database for our application's use.\r\n\r\nWe create a new database called `coloredlistdb` and create a new collection `lists`.\r\n\r\nFirst, we run the `mongo` command to enter the MongoDB shell.\r\n\r\n```\r\n> mongo\r\nMongoDB shell version: 3.2.5\r\nconnecting to: test\r\nWelcome to the MongoDB shell.\r\nFor interactive help, type \"help\".\r\nFor more comprehensive documentation, see\r\n    http://docs.mongodb.org/\r\nQuestions? Try the support group\r\n    http://groups.google.com/group/mongodb-user\r\n```\r\n\r\nAt this point, there is no database created yet, so we run the following command to initialize a database for `coloredlistdb`.\r\n\r\n```\r\n> use coloredlistdb\r\nswitched to db coloredlistdb\r\n```\r\n\r\nWe will create a new collection to store our list items by running the following command.\r\n\r\n```\r\n> db.createCollection(\"lists\")\r\n{ \"ok\" : 1 }\r\n```\r\n\r\nWe also initialize some data in the collection so that our application will display some items on first run.\r\n\r\n```\r\n> db.lists.insert({\r\n... text:'Walk the dog',\r\n... color:'Red'\r\n... })\r\nWriteResult({ \"nInserted\" : 1 })\r\n> db.lists.insert({\r\n... text:'Pick up dry cleaning',\r\n... color:'Blue'\r\n... })\r\nWriteResult({ \"nInserted\" : 1 })\r\n> db.lists.insert({\r\n... text:'Milk',\r\n... color:'Green'\r\n... })\r\nWriteResult({ \"nInserted\" : 1 })\r\n```\r\n\r\nTo verify all the items have been inserted, we run the following command:\r\n\r\n```\r\n> db.lists.find()\r\n{ \"_id\" : ObjectId(\"57220c6dcbe425b0c391538e\"), \"text\" : \"Walk the dog\", \"color\" : \"Red\" }\r\n{ \"_id\" : ObjectId(\"57220ccfcbe425b0c391538f\"), \"text\" : \"Pick up dry cleaning\", \"color\" : \"Blue\" }\r\n{ \"_id\" : ObjectId(\"57220cdccbe425b0c3915390\"), \"text\" : \"Milk\", \"color\" : \"Green\" }\r\n```\r\n\r\nNotice that we have changed the data structure for list item. A MongoDB collection is analogous to a RDBMS table, each collection contains multiple documents, which is in turn analagous to RDBMS table rows. In MongoDB, each document is represented similar to JSON object.\r\n\r\nFor the purpose of our list items, we will define our data structure as follows:\r\n\r\n```\r\n{\r\n    \"_id\" : item_id,\r\n    \"text\" : item_text,\r\n    \"color\" : item_color\r\n}\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Make Database\r\n\r\nWe can now start using the database from the application itself.\r\n\r\nFirst of all, we need to import the required modules to use the pymongo driver.\r\n\r\n```\r\nfrom pymongo import MongoClient\r\nfrom bson.objectid import ObjectId\r\n```\r\n\r\nWe are going to use the `ObjectId` class for setting the item ID, so we can remove the `import uuid` statement.\r\n\r\nThen we create a method to initialize the database and return the database object.\r\n\r\n```\r\ndef create_db():\r\n    client = MongoClient(\"localhost\",27017)\r\n    db = client['coloredlistdb']\r\n    return db\r\n```\r\n\r\nIn this method, we create a `MongoClient` that connects to `localhost` port `27017`.\r\n\r\nThen we get the database of the name `coloredlistdb` as we have created earlier.\r\n\r\nWe will pass the database object to various request handlers for data storage and retrieval.\r\n\r\nSince we create our URLSpec in the `make_app` method, we will pass the database object to the method in the main code.\r\n\r\n```\r\nif __name__ == '__main__':\r\n    db = create_db()\r\n    app = make_app(db)\r\n```\r\n\r\nInside the `make_app` method, we will pass the database object to each URLSpec as follows:\r\n\r\n```\r\ndef make_app(db):\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n        url(r\"/list/create\", ListHandler, dict(db=db)),\r\n        url(r\"/list\", ListHandler, dict(db=db)),\r\n    ],\r\n    debug=True)\r\n```\r\n\r\nThen inside the `ListHandler` class, we need to add a `initialize` method to accept the database object and assign to its own `db` variable.\r\n\r\n```\r\ndef initialize(self, db):\r\n    self.db = db\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Using Database\r\n\r\nSince now that we have the database object in the `ListHandler`, we no longer use the in-memory storage.\r\n\r\nInstead, we will get the list by calling `self.db['lists']`.\r\n\r\nWe will need to update all `get`, `post`, `put` and `delete` methods to use this database object.\r\n\r\n```\r\ndef get(self):\r\n    list_items = self.db['lists']\r\n    items = [item for item in list_items.find()]\r\n    self.render(\"list.html\", items=items)\r\n\r\ndef post(self):\r\n    list_items = self.db['lists']\r\n    text = self.get_body_argument(\"text\")\r\n    list_items.insert_one({'text':text, 'color':'Blue'})\r\n    self.redirect(\"/list\")\r\n\r\ndef put(self, item_id):\r\n    list_items = self.db['lists']\r\n    text = self.get_body_argument(\"text\")\r\n    item = list_items.find_one({'_id':ObjectId(item_id)})\r\n    if item:\r\n        list_items.update_one({'_id':ObjectId(item_id)}, {'$set':{'text':text}})\r\n        self.set_status(200)\r\n        self.finish(\"OK\")\r\n        return\r\n    else:\r\n        self.set_status(404)\r\n        self.finish(\"Not found\")\r\n        return\r\n\r\ndef delete(self, item_id):\r\n    list_items = self.db['lists']\r\n    item = list_items.find_one({'_id':ObjectId(item_id)})\r\n    if item:\r\n        list_items.remove({'_id':ObjectId(item_id)})\r\n        self.set_status(200)\r\n        self.finish(\"OK\")\r\n        return\r\n    else:\r\n        self.set_status(404)\r\n        self.finish(\"Not found\")\r\n        return\r\n```\r\n\r\nLet's break it down a little and explain some of the new code.\r\n\r\nIn the `get` method, we get the collection object by calling `self.db['lists']`. To retrieve the documents, we need to get a cursor to the dataset by calling `list_items.find`, which is like a iterator to the documents. We use list comprehension construct `[item for item in list_items.find()]` to collect the documents into a list that can be used to render the `list.html` page.\r\n\r\nFor the `post` method, we will call the list_items.insert_one` method, passing in the dictionary containing the item text and color as parameter. The `_id` field will be automatically generated.\r\n\r\nFor the `put` method, we will first call `list_items.find_one` and pass in the `ObjectId(item_id)` as the query filter. This will return us only one result or none. If the result is not none, then we will update the collection and setting a new `text value for the document with `_id` `ObjectId(item_id)`.\r\n\r\nFinally in the `delete` method, similar to the `put` method, we first query the collection to get the document with the same `ObjectId(item_id)`, then we simply call `list_items.remove` to delete the document from the collection.\r\n\r\nNotice that we cannot simply pass the plain `item_id` string as the `_id` value, instead, we need to create a new `ObjectId` object with the `item_id`.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Template with New Data Structure\r\n\r\nSince we have changed the data structure of the list item, we also need to update the list view to reflect the changes.\r\n\r\n```\r\n{% for item in items %}\r\n    <li class=\"{{ item[\"color\"] }}\">\r\n        <span><input type=\"hidden\" id=\"edit-item-{{ item['_id'] }}-id\" value=\"{{ item['_id'] }}\"><input type=\"text\" id=\"edit-item-{{ item['_id'] }}-text\" name=\"text\" value=\"{{ item['text'] }}\"><a href=\"#\" id=\"edit-item-{{ item['_id'] }}-submit\" class=\"button edit-button\">Edit</a><a href=\"#\" id=\"delete-item-{{ item['_id'] }}-submit\" class=\"button delete-button\">Delete</a></span>\r\n    </li>\r\n{% end %}\r\n```\r\n\r\nInstead of iterating through the IDs as in the earlier version, we now can iterate through the list of items directly.\r\n\r\nTo access the `text` and `value` attributes, we just call `item['text']` or `item['color']`.\r\n\r\nPreviously, we have not included the `Delete` function. Now we will add the AJAX call for deleting the item. It is similar in structure to the edit AJAX call, except that here we are using type `DELETE` and there is no need to send any data in the request.\r\n\r\n```\r\n$('.delete-button').click(function() {\r\n    var itemSpan = $(this).parent();\r\n    var itemId = $(itemSpan).find(\"input[type='hidden']\").val();\r\n    var text = $(itemSpan).find(\"input[name='text']\").val();\r\n    var url = \"/list/\" + itemId + \"/delete\";\r\n    console.log(url);\r\n    $.ajax({\r\n        type: \"DELETE\",\r\n        url: url,\r\n        dataType: \"json\",\r\n        data: {},\r\n        statusCode: {\r\n            200: function(xhr) {\r\n                alert(\"Item deleted successfully\");\r\n                window.location.href = \"/list\";\r\n            },\r\n            404: function(xhr) {\r\n                alert(\"Item ID not found\");\r\n            },\r\n        },\r\n    });\r\n});\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Structuring the App\r\n\r\nNow we have a functional app where we can list items, add new item, edit and remove existing item.\r\n\r\nHowever, the current structure is not the most ideal one. We have embedded Javascript directly in the `list.html` file, which makes it more difficult to maintain, and we cannot make use of caching to make our page load faster.\r\n\r\nIdeally, we want to separate HTML, Javascript and CSS scripts into separate files, so that the browsers can cache unchanged `.js` and `.css` files, making page loading faster.\r\n\r\nIn the following sections, we will go through how to separate our Javascripts from the HTML pages.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Static Content\r\n\r\nIt is a common practice to create a `static` directory, containing `js`, `css` and `img` sub-directories. Each of these directories will contain Javascript, CSS and image files.\r\n\r\nThen inside our HTML page, we will include them by using tags like `<script src=\"\"></script>` for Javascript and `<link href=\"\">` for CSS.\r\n\r\nFor our app, we will create `static` in the same directory as `app.py`, and contain `js`, `css` and `img` sub-directories like this:\r\n\r\n```\r\n+-- coloredlist/\r\n|   +-- app.py\r\n|   +-- static/\r\n|   |   +-- css/\r\n|   |   +-- img/\r\n|   |   +-- js/\r\n```\r\n\r\nThen, we will create a new file `list.js` under the `static/js` directory, and extract the Javascript from `list.html` into this new file.\r\n\r\n### `list.js`\r\n\r\n```\r\n$(document).ready(function() {\r\n    $('.edit-button').click(function() {\r\n        var itemSpan = $(this).parent();\r\n        var itemId = $(itemSpan).find(\"input[type='hidden']\").val();\r\n        var text = $(itemSpan).find(\"input[name='text']\").val();\r\n        var url = \"/list/\" + itemId + \"/edit\";\r\n        console.log(url);\r\n        $.ajax({\r\n            type: \"PUT\",\r\n            url: url,\r\n            dataType: \"json\",\r\n            data: {\"id\": itemId, \"text\": text},\r\n            statusCode: {\r\n                200: function(xhr) {\r\n                    alert(\"Item updated successfully\");\r\n                },\r\n                404: function(xhr) {\r\n                    alert(\"Item ID not found\");\r\n                },\r\n            },\r\n        });\r\n    });\r\n    $('.delete-button').click(function() {\r\n        var itemSpan = $(this).parent();\r\n        var itemId = $(itemSpan).find(\"input[type='hidden']\").val();\r\n        var text = $(itemSpan).find(\"input[name='text']\").val();\r\n        var url = \"/list/\" + itemId + \"/delete\";\r\n        console.log(url);\r\n        $.ajax({\r\n            type: \"DELETE\",\r\n            url: url,\r\n            dataType: \"json\",\r\n            data: {},\r\n            statusCode: {\r\n                200: function(xhr) {\r\n                    alert(\"Item deleted successfully\");\r\n                    window.location.href = \"/list\";\r\n                },\r\n                404: function(xhr) {\r\n                    alert(\"Item ID not found\");\r\n                },\r\n            },\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n### `list.html`\r\n\r\n```\r\n<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\" integrity=\"sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=\" crossorigin=\"anonymous\"></script>\r\n<script src=\"{{ static_url('js/list.js') }}\"></script>\r\n```\r\n\r\nNotice that we are using `static_url()` for the `list.js` URL formation, which will return the `list.js` relative to the static file path defined in our application as follows:\r\n\r\n```\r\ndef make_app(db):\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n        url(r\"/list/create\", ListHandler, dict(db=db)),\r\n        url(r\"/list\", ListHandler, dict(db=db)),\r\n    ],\r\n    debug=True,\r\n    static_path=os.path.join(os.path.dirname(__file__), \"static\"))\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Template Inheritance\r\n\r\nPreviously we made a note about template inheritance when we were making the list page. Now we have finally come to this part where we are going to make some base templates that can be extended by various pages.\r\n\r\nFirst of all, we need to create a new directory `templates` in the same directory as `app.py`. Then we need to inform our application to load templates from the `templates` directory through the `template_path` setting:\r\n\r\n```\r\ndef make_app(db):\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n        url(r\"/list/create\", ListHandler, dict(db=db)),\r\n        url(r\"/list\", ListHandler, dict(db=db)),\r\n    ],\r\n    debug=True,\r\n    static_path=os.path.join(os.path.dirname(__file__), \"static\"),\r\n    template_path=os.path.join(os.path.dirname(__file__), \"templates\"))\r\n```\r\n\r\nWe now create a new file called `base.html`. Basically what this file will contain is the entire HTML markup of `main.html` with some additions, and it will be the base of all our pages.\r\n\r\n```\r\n<!DOCTYPE html>    \r\n<html>\r\n<head>\r\n    <title>Colored List App</title>\r\n</head>\r\n<body>\r\n    <div id=\"page-wrap\">\r\n        <div id=\"header\">\r\n            <h1><a href=\"/\">Colored List App</a></h1>\r\n            <div id=\"control\">\r\n                <p><a href=\"/logout\" class=\"button\">Log Out</a>&nbsp;<a href=\"/account\" class=\"button\">Your Account</a></p>\r\n                <p><a href=\"/signup\" class=\"button\">Sign Up</a>&nbsp;<a href=\"/login\" class=\"button\">Log In</a></p>\r\n            </div>\r\n        </div>\r\n        <div id=\"ribbon\">\r\n            Reminders\r\n            <ul>\r\n                <li>Your list automatically saves</li>\r\n                <li>Double-click list items to edit them</li>\r\n            </ul>\r\n        </div>\r\n        <div id=\"main\">\r\n        {% block content %}\r\n        {% end %}\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n```\r\n\r\nUnder `<div id=\"main\">`, we add the Python expressions:\r\n\r\n```\r\n{% block content %}\r\n{% end %}\r\n```\r\n\r\nThis allow us to extend the `base.html` template and put various page contents within this `div`.\r\n\r\nWe also need to move our `main.html` and `list.html` into the newly created `templates` directory.\r\n\r\nNow we can extend `base.html` in `list.html` like this:\r\n\r\n```\r\n{% extends \"base.html\" %}\r\n{% block content %}\r\n<ul>\r\n{% for item in items %}\r\n    <li class=\"{{ item[\"color\"] }}\">\r\n        <span><input type=\"hidden\" id=\"edit-item-{{ item['_id'] }}-id\" value=\"{{ item['_id'] }}\"><input type=\"text\" id=\"edit-item-{{ item['_id'] }}-text\" name=\"text\" value=\"{{ item['text'] }}\"><a href=\"#\" id=\"edit-item-{{ item['_id'] }}-submit\" class=\"button edit-button\">Edit</a><a href=\"#\" id=\"delete-item-{{ item['_id'] }}-submit\" class=\"button delete-button\">Delete</a></span>\r\n    </li>\r\n{% end %}\r\n</ul>\r\n\r\n<form action=\"/list/create\" method=\"post\">\r\n    <div>\r\n        <input type=\"text\" id=\"new-list-item-text\" name=\"text\">\r\n        <input type=\"submit\" id=\"new-item-submit\" value=\"Add\" class=\"button\">\r\n    </div>\r\n</form>\r\n\r\n<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\" integrity=\"sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=\" crossorigin=\"anonymous\"></script>\r\n<script src=\"{{ static_url('js/list.js') }}\"></script>\r\n{% end %}\r\n```\r\n\r\nFirst, we need to indicate that we are extending from `base.html` by the expression `{% extends \"base.html\" %}`.\r\n\r\nThen we indicate that we will extend the `{% block content %}` block by including our original `list.html` markup under `{% block content %}{% end %}` block.\r\n\r\nWhen we load our `/list` page, we will have all the markup from `base.html` including `<div class=\"header\">` and `<div class=\"ribbon\">`, followed by the `{% block content %}` block, which will include `<ul>` and `<form>`.\r\n\r\nFor `main.html`, since we have just basically migrated the entire markup into `base.html`, we can just extend `base.html` directly inside `main.html` like this:\r\n\r\n```\r\n{% extends \"base.html\" %}\r\n```\r\n\r\nThe advantage of template inheritance is that we don't need to copy-paste the header and footer everytime we create a new page with the same look-and-feel.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Handlers Module\r\n\r\nThe next thing we want to tackle here is `app.py`. Notice that it has grown in size pretty quickly even though have just started with 2 handlers. We want to make it easily maintainable, so we should start separating different handlers into their rightful places.\r\n\r\nFirst, we need to create a new directory `handlers` in the same directory as `app.py`. Then we create `__init__.py` in `handlers` to indicate that it should be a `import`-able module.\r\n\r\nWe will migrate `class MainHandler` and `class ListHandler` into separate files, `main.py` and `list.py` respectively inside `handlers` directory.\r\n\r\nWhat we have will be like this:\r\n\r\n### `main.py`\r\n\r\n```\r\nimport tornado.web\r\n\r\n\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        self.render(\"main.html\")\r\n```\r\n\r\n### `list.py`\r\n\r\n```\r\nimport tornado.web\r\nfrom bson.objectid import ObjectId\r\n\r\n\r\nclass ListHandler(tornado.web.RequestHandler):\r\n    def initialize(self, db):\r\n        self.db = db\r\n\r\n    def get(self):\r\n        # ommitted for simplicity\r\n\r\n    def post(self):\r\n        # ommitted for simplicity\r\n\r\n    def put(self, item_id):\r\n        # ommitted for simplicity\r\n\r\n    def delete(self, item_id):\r\n        # ommitted for simplicity\r\n```\r\n\r\nSince we have extracted these 2 classes out of `app.py`, we need to tell the main application where to get the 2 handlers. For that, we need to import the 2 handlers from the newly created `handlers` module like this:\r\n\r\n```\r\nfrom handlers.main import MainHandler\r\nfrom handlers.list import ListHandler\r\n```\r\n\r\nWe don't need to change anything about the URLSpec definitions in creating the `tornado.web.Application` object.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## App Settings\r\n\r\nOur app is starting to look more structured than when we first started building it. We want to take a step further and make it more easily configurable by extracting all settings into a separate file called `settings.py`, which we will craete under the same directory as `app.py`.\r\n\r\n```\r\nimport os\r\nfrom tornado.options import define, options\r\n\r\n\r\n# Define file paths\r\nROOT = os.path.join(os.path.dirname(__file__))\r\nSTATIC_ROOT = os.path.join(ROOT, \"static\")\r\nTEMPLATE_ROOT = os.path.join(ROOT, \"templates\")\r\n\r\n\r\n# Define global options\r\ndefine(\"port\", default=9080, help=\"server port\", type=int)\r\ndefine(\"debug\", default=True, help=\"debug mode\")\r\ndefine(\"dbhost\", default=\"localhost\", help=\"db host\")\r\ndefine(\"dbport\", default=27017, help=\"db port\", type=int)\r\ndefine(\"dbname\", default=\"coloredlistdb\", help=\"name of db\")\r\n\r\n\r\n# Define application settings\r\nsettings = {}\r\nsettings[\"debug\"] = options.debug\r\nsettings[\"static_path\"] = STATIC_ROOT\r\nsettings[\"template_path\"] = TEMPLATE_ROOT\r\n```\r\n\r\nIn the newly created `settings.py` file, we will define the `STATIC_ROOT` and `TEMPLATE_ROOT` variables to be used in the application settings for `static_path` and `template_path` respectively.\r\n\r\nWe also make use of `tornado.options.options`, which is a global options object, to store certain options like `port` and `dbhost` etc by calling the `define` function.\r\n\r\nSince we have extracted all the settings and options into a separate file, we need to tell our application how to load these settings and options. In our `app.py` file, we will need to import the `settings` object and `tornado.options.options` object:\r\n\r\n```\r\nfrom settings import settings\r\nfrom tornado.options import options\r\n```\r\n\r\nThen we can make use of the settings and options like this:\r\n\r\n```\r\ndef create_db():\r\n    client = MongoClient(options.dbhost, options.dbport)\r\n    db = client[options.dbname]\r\n    return db\r\n\r\ndef make_app(db):\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n        url(r\"/list/create\", ListHandler, dict(db=db)),\r\n        url(r\"/list\", ListHandler, dict(db=db)),\r\n    ],\r\n    **settings)\r\n\r\nif __name__ == '__main__':\r\n    db = create_db()\r\n    app = make_app(db)\r\n    app.listen(options.port)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\nBy separating the settings and options from our application, we can make changes to the settings and options without having to change the `app.py` directly. It gives us the flexibility to deploy the application on different servers and using different databases by just dealing with `settings.py` file.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## DB Settings\r\n\r\nSince I've mentioned about using different databases for our app, we might as well make our app database-independent, meaning we shouldn't be tied to using only MongoDB, but have the option to use MySQL or PostgreSQL or whichever database deemed appropriate. For this, we have to restructure how we define our `db` object. Instead of creating the `db` object inside `app.py`, we will create a separate `db.py` under the same directory as `app.py`, where we will create a `db` object for our application's use.\r\n\r\n```\r\nfrom pymongo import MongoClient\r\nfrom tornado.options import options\r\n\r\n\r\ndef create_db():\r\n    client = MongoClient(options.dbhost, options.dbport)\r\n    db = client[options.dbname]\r\n    return db\r\n    \r\ndb = create_db()\r\n```\r\n\r\nThen, we will remove the `create_db` function from `app.py`, and instead do a import of the `db` object:\r\n\r\n```\r\nfrom db import db\r\n```\r\n\r\nWe can also remove the call to `create_db` in our main code:\r\n\r\n```\r\nif __name__ == '__main__':\r\n    app = make_app()\r\n    app.listen(options.port)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\nWe are not yet ready to be database-independent, but we will come to creating a database wrapper in a while.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## URL Patterns\r\n\r\nHonestly, I still haven't figured out why it is best practice to put URLs into a separate file. I guess it is probably for maintainability reasons. Personally I would also prefer defining the URLs separately from the main application, so that the `app.py` file will look clean and lean.\r\n\r\nWe will create a new `urls.py` file under the same directory as `app.py`. It will just contain our URLSpecs as follows:\r\n\r\n```\r\nfrom tornado.web import url\r\nfrom handlers.main import MainHandler\r\nfrom handlers.list import ListHandler\r\nfrom db import db\r\n\r\n\r\nurl_patterns = [\r\n    url(r\"/\", MainHandler),\r\n    url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n    url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n    url(r\"/list/create\", ListHandler, dict(db=db)),\r\n    url(r\"/list\", ListHandler, dict(db=db)),\r\n]\r\n```\r\n\r\nSince we have extracted the URLs from `app.py`, we no longer need to import `db` and `handlers` in `app.py`, and the file should look like this now:\r\n\r\n```\r\nimport tornado.ioloop\r\nimport tornado.web\r\nfrom settings import settings\r\nfrom tornado.options import options\r\nfrom urls import url_patterns\r\n\r\n\r\ndef make_app():\r\n    return tornado.web.Application(url_patterns, **settings)\r\n\r\n\r\nif __name__ == '__main__':\r\n    app = make_app()\r\n    app.listen(options.port)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Final Structure\r\n\r\nAt the end of all the restructuring, we should have achieved our desired structure for the application:\r\n\r\n```\r\n+-- coloredlist/\r\n|   +-- app.py\r\n|   +-- db.py\r\n|   +-- settings.py\r\n|   +-- urls.py\r\n|   +-- handlers/\r\n|   |   +-- __init__.py\r\n|   |   +-- list.py\r\n|   |   +-- main.py\r\n|   +-- static/\r\n|   |   +-- css/\r\n|   |   +-- img/\r\n|   |   +-- js/\r\n|   |   |   +-- list.js\r\n|   +-- templates/\r\n|   |   +-- base.html\r\n|   |   +-- list.html\r\n|   |   +-- main.html\r\n```\r\n\r\nThis may not be the best structure for a Tornado app, but we will improve on it as we add in more advanced features.\r\n\r\n[Back to top](#table-of-contents)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}