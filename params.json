{
  "name": "Coloredlist",
  "tagline": "A Tornado Tutorial App",
  "body": "### Table of Contents\r\n\r\n* [Introduction](#introduction)\r\n* [Getting Started](#getting-started)\r\n  * [Virtual Environment](#virtual-environment)\r\n  * [Installing Packages](#installing-packages)\r\n* [Creating the App](#creating-the-app)\r\n  * [The Main Application](#the-main-application)\r\n  * [Templates](#templates)\r\n* [Creating the List](#creating-the-list)\r\n  * [List URL Mapping](#list-url-mapping)\r\n  * [In Memory Storage](#in-memory-storage)\r\n  * [Import UUID](#import-uuid)\r\n  * [List Template](#list-template)\r\n  * [List Handler](#list-handler)\r\n* [Edit and Delete List Items](#edit-and-delete-list-items)\r\n  * [List Item URL Mapping](#list-item-url-mapping)\r\n  * [List Item Handler](#list-item-handler)\r\n  * [Importing Javascript](#importing-javascript)\r\n  * [Edit Template](#edit-template)\r\n  * [AJAX](#ajax)\r\n* [Persistent Storage](#persistent-storage)\r\n  * [pymongo](#pymongo)\r\n  * [Setting Up Database](#setting-up-database)\r\n  * [Make Database](#make-database)\r\n  * [Using Database](#using-database)\r\n  * [List Template with New Data Structure](#list-template-with-new-data-structure)\r\n* [Structuring the App](#structuring-the-app)\r\n  * [Static Content](#static-content)\r\n  * [Template Inheritance](#template-inheritance)\r\n  * [Handlers Module](#handlers-module)\r\n  * [App Settings](#app-settings)\r\n  * [DB Settings](#db-settings)\r\n  * [URL Patterns](#url-patterns)\r\n  * [Final Structure](#final-structure)\r\n* [Styling the App](#styling-the-app)\r\n  * [Basic CSS](#basic-css)\r\n* [User Authentication](#user-authentication)\r\n  * [Login Form](#login-form)\r\n  * [Login and Logout Handlers](#login-and-logout-handlers)\r\n  * [Authentication URL Patterns](#authentication-url-patterns)\r\n  * [Authentication AJAX](#authentication-ajax)\r\n  * [Secret Cookie](#secret-cookie)\r\n* [User Accounts](#user-accounts)\r\n  * [New User Collection](#new-user-collection)\r\n  * [Create Account Form](#create-account-form)\r\n  * [Create Account Script](#create-account-script)\r\n  * [After Create Account](#after-create-account)\r\n  * [Create Account Handler and URL Mapping](#create-account-handler-and-url-mapping)\r\n  * [Authenticate User with Password](#authenticate-user-with-password)\r\n\r\n\r\n# Introduction\r\n\r\nThis is a prototype as part of learning Tornado framework. The idea and design of the app is based off [here](https://css-tricks.com/app-from-scratch-1-design/).\r\n\r\nI will attempt to write the README in tutorial style, as how I taught myself doing it from various sources.\r\n\r\nI will also try to commit the README and source code in accordance to the progress of the application.\r\n\r\nHopefully this will make it easier to follow the README and source code at different stages.\r\n\r\n*Please feel free to file issues regarding the README if you find something inaccurate or unclear about the explanation. This is my first time writing a public tutorial and I have a lot to learn from anyone of you who care enough to read this. Thank you so much for your support.*\r\n\r\n*Also, please do file issues regarding the actual source code if you find the code does not comply with certain standards or if improvements are needed. I am still new to python and there will surely be coding style which I have not followed.*\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Getting Started\r\n\r\n## Virtual Environment\r\n\r\nAs this is a python-based app, it is recommended to use `virtualenv` to contain the necessary packages for this project only.\r\n\r\nRun `pip install virtualenv` to install `virtualenv` if you don't already have the package.\r\n\r\nIn the directory you have created for this project, run the command `virtualenv venv` to create the directory for the new environment. Replace `venv` with any name you wish.\r\n\r\n*If you want to use python3 for the project, run `virtualenv -p python3 venv` instead. Make sure you already have python3 installed.*\r\n\r\nTo activate the environment, run the command `. venv/bin/activate` in the directory you have created `venv` directory.\r\n\r\nYou should see that your command prompt has `(venv)` in the prefix.\r\n\r\nYou can read more about `virtualenv` [here](https://virtualenv.readthedocs.org).\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Installing Packages\r\n\r\nThe packages required for getting started with developing this app is included in the `requirements.txt` file.\r\n\r\nRun `pip install -r requirements.txt` to install the packages.\r\n\r\nYou can read more about python package installation [here](https://pip.pypa.io/en/stable/user_guide/).\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Creating the App\r\n\r\n## The Main Application\r\n\r\nWe will start with a `app.py` file, which contains the basics of the application we want to create.\r\n\r\nFor now, we will not care about the application structure. Our goal here is just to get it to work.\r\n\r\nWe need to import some packages from the `tornado` framework.\r\n\r\n```\r\nimport tornado.ioloop\r\nimport tornado.web\r\nfrom tornado.web import url\r\n```\r\n\r\nWe will use a function to create the application instead of writing it directly in the main code.\r\n\r\n```\r\ndef make_app():\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n    ],\r\n    debug=True)\r\n```\r\n\r\nWe first define the main page URL and its handler. Whenever the client requests for `http://server:port/`, the `MainHandler` will handle the request and send the appropriate response.\r\n\r\nThe `debug=True` setting is to run the application in debug mode.\r\n\r\nNow we will define the `MainHandler`.\r\n\r\n```\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        self.write('''<!DOCTYPE html>    \r\n                    <html>\r\n                    <head>\r\n                        <title>Colored List App</title>\r\n                    </head>\r\n                    <body>\r\n                        <div id=\"page-wrap\">\r\n                            <div id=\"header\">\r\n                                <h1><a href=\"/\">Colored List App</a></h1>\r\n                                <div id=\"control\">\r\n                                    <p><a href=\"/logout\" class=\"button\">Log Out</a>&nbsp;<a href=\"/account\" class=\"button\">Your Account</a></p>\r\n                                    <p><a href=\"/signup\" class=\"button\">Sign Up</a>&nbsp;<a href=\"/login\" class=\"button\">Log In</a></p>\r\n                                </div>\r\n                            </div>\r\n                            <div id=\"ribbon\">\r\n                                Reminders\r\n                                <ul>\r\n                                    <li>Your list automatically saves</li>\r\n                                    <li>Double-click list items to edit them</li>\r\n                                </ul>\r\n                            </div>\r\n                            <div id=\"main\">\r\n                            </div>\r\n                        </div>\r\n                    </body>\r\n                    </html>''')\r\n```\r\n\r\nWhen the client requests for `http://server:port/`, it will be sent as a `GET` request, so this will be handled by the `MainHandler`'s `get` function.\r\n\r\nWe will serve a HTML page as the response.\r\n\r\nNotice that I have injected some CSS classes and defined some IDs in the HTML elements. We will come to styling later.\r\n\r\nIn order for the server to run, we need to define the main entry code.\r\n\r\n```\r\nif __name__ == '__main__':\r\n    app = make_app()\r\n    app.listen(9080)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\nWe need to create an instance of the application by calling the `make_app()` function. Then I make it listen to port 9080. You can choose whichever port you wish.\r\n\r\nThe server is started by `tornado.ioloop.IOLoop.current().start()`.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Templates\r\n\r\nIt is a little messy to write the HTML code directly in the `MainHandler`'s `get` function. We will try to take this code out into a proper HTML file, and get the handler to render the HTML file.\r\n\r\nWe first create the `main.html` file and put the exact HTML code into this file.\r\n\r\n```\r\n<!DOCTYPE html>    \r\n<html>\r\n<head>\r\n    <title>Colored List App</title>\r\n</head>\r\n<body>\r\n    <div id=\"page-wrap\">\r\n        <div id=\"header\">\r\n            <h1><a href=\"/\">Colored List App</a></h1>\r\n            <div id=\"control\">\r\n                <p><a href=\"/logout\" class=\"button\">Log Out</a>&nbsp;<a href=\"/account\" class=\"button\">Your Account</a></p>\r\n                <p><a href=\"/signup\" class=\"button\">Sign Up</a>&nbsp;<a href=\"/login\" class=\"button\">Log In</a></p>\r\n            </div>\r\n        </div>\r\n        <div id=\"ribbon\">\r\n            Reminders\r\n            <ul>\r\n                <li>Your list automatically saves</li>\r\n                <li>Double-click list items to edit them</li>\r\n            </ul>\r\n        </div>\r\n        <div id=\"main\">\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n```\r\n\r\nTo render this HTML file, we use the `render` method of the `RequestHandler` class.\r\n\r\nWe replace the `get` method we wrote earlier with the following:\r\n\r\n```\r\ndef get(self):\r\n    self.render(\"main.html\")\r\n```\r\n\r\nNow the code looks much cleaner as we separate the view out of the logic code.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Creating the List\r\n\r\nWe now have a basic structure application. It's time to start creating the list itself.\r\n\r\nWe will start with just 2 simple functionalities for the list.\r\n* View the list\r\n* Create a list item\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List URL Mapping\r\n\r\nFor each of the functionalities above, we will design endpoints for the client to send the requests to.\r\n\r\nIn the `make_app()` method we created earlier, we will add a few more `URLSpec` objects for each endpoint.\r\n\r\n```\r\ndef make_app():\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/create\", ListHandler),\r\n        url(r\"/list\", ListHandler),\r\n    ],\r\n    debug=True)\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## In Memory Storage\r\n\r\nFor the time being, we will not use a persistent database for storage. Instead, we will create a in-memory storage for our list items.\r\n\r\nWe will come to using persistent storage at a later stage. For now, our purpose is to get the logic working.\r\n\r\nWe declare a global variable `list_items` that we will use as a in-memory storage for all the list items.\r\n\r\nWe will define it as a dictionary where the item ID will be the key and the item definition is another dictionary that forms the value paired with the key.\r\n\r\n```\r\nlist_items = {\r\n    '1':{'id':\"1\",'text':\"Walk the dog\",'color':\"Red\"},\r\n    '2':{'id':\"2\",'text':\"Pick up dry cleaning\",'color':\"Blue\"},\r\n    '3':{'id':\"3\",'text':\"Milk\",'color':\"Green\"},\r\n}\r\n```\r\n\r\nWe initialize some data first that we can display in the front-end.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Import UUID\r\n\r\nFor the purpose of using `uuid` to generate a unique ID for each item, we need to remember to import the `uuid` module.\r\n\r\n```\r\nimport uuid\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Template\r\n\r\nTo help us visualize the data, let's create the `list.html` template file first.\r\n\r\n```\r\n<ul>\r\n{% for item_id in items %}\r\n    <li class=\"{{ items[item_id]['color'] }}\">\r\n        <span>{{ items[item_id]['text'] }}</span>\r\n    </li>\r\n{% end %}\r\n</ul>\r\n\r\n<form action=\"/list/create\" method=\"post\">\r\n    <div>\r\n        <input type=\"text\" id=\"new-list-item-text\" name=\"text\">\r\n        <input type=\"submit\" id=\"new-item-submit\" value=\"Add\" class=\"button\">\r\n    </div>\r\n</form>\r\n```\r\n\r\nNotice something different is happening in this template. We have injected some python code in this template to help us display the list items.\r\n\r\nSince we are going to have a list of items, it is logical to have a loop control to display each item. This is where we use the `{% for item_id in items %}` construct.\r\n\r\nIn our in-memory store, we use the item ID as the key for the item definition itself, so in order to access the item data, we will need to get the item dictionary and then the attribute.\r\n\r\nFor example, we will use `{{ items[item_id]['text'] }}` to retrieve the text of the item with a specific `item_id`.\r\n\r\nWe have not added all the `<head>` and `<body>` tags in this template, because we are going to make use of template inheritance later.\r\n\r\nFor now we just want to make sure the data are displayed correctly with this structure.\r\n\r\nThis template should display a list of items in storage, and also provide a form to allow creating a new item which will be added to the in-memory storage.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Handler\r\n\r\nWe will not use the `MainHandler` for handling requests pertaining to the list. Instead, we will create a new `ListHandler` class for this purpose.\r\n\r\nFor each of the functionalities, we assign a method in the `ListHandler` according to the HTTP method we allow for access.\r\n\r\n```\r\nclass ListHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        self.render(\"list.html\", items=list_items)\r\n\r\n    def post(self):\r\n        text = self.get_body_argument(\"text\")\r\n        item_id = str(uuid.uuid4())\r\n        list_items[item_id] = {'id':item_id,'text':text,'color':\"Blue\"}\r\n        self.redirect(\"/list\")\r\n```\r\nAs the client requests for `http://server:port/list`, the `ListHandler`'s `get` method will render the `list.html` page.\r\n\r\nIf the client enters some text in the form and hit the `Add` button, it will send a `POST` request containing the form data. The `ListHandler`'s `post` method will handle this request.\r\n\r\nFirst we will extract the text entered by the client by calling `self.get_body_argument(\"text\")`. Note that all form data are accessible by `self.get_body_argument` method by passing in the input name as the method parameter.\r\n\r\nWe will auto-generate a unique ID for this item by using `uuid.uuid4()` method.\r\n\r\nThen we create a new dictionary containing all the item data and add it to the in-memory `list_items` storage using the `item_id` as key.\r\n\r\nOnce we are done with the storage, we will redirect to the `/list` page so that the changes can be reflected to the user.\r\n\r\nWe will realize that the list items are not sorted according to the order they are created. For that, we will need to devise some data strucutre and logic to handle the sorting later.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Edit and Delete List Items\r\n\r\nA list without the edit or delete functions are almost useless. We will now add these functionalities to our list.\r\n\r\nThere can be a few ways to approach this problem.\r\n\r\n1. Continue using `ListHandler` and add the corresponding `put` and `delete` methods for editing and deleting list items.\r\n2. Create a separate `ListItemEditHandler` and `ListItemDeleteHandler` for editing and deleting list items.\r\n\r\nThe first approach will be more compact due to having only a single handler. The methods also clearly reflects the purpose of the request, mapping edit to `put` and delete to `delete` methods.\r\n\r\nHowever, we cannot simply use a form for editing and deleting, because HTML `<form>` does not support `put` and `delete` methods. We will need to use AJAX for these actions.\r\n\r\nThe second approach is more lengthy due to having to create 2 more handlers just for each of the actions.\r\n\r\nHowever, we can easily use a form to send a `post` request for each actions, and map to a `post` method within each handler.\r\n\r\nPersonally, I would prefer doing the first approach. I only need to main a single handler, while having the advantage of mapping the actions correctly to the methods: edit to `put` and delete to `delete`.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Item URL Mapping\r\n\r\nFor using the first approach, we will map the request URL as follows:\r\n\r\n```\r\nurl(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler),\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Item Handler\r\n\r\nSince it is an edit action, we will map it to the `put` method of the `ListHandler`.\r\n\r\n```\r\ndef put(self, item_id):\r\n    text = self.get_body_argument(\"text\")\r\n    item = None\r\n    try:\r\n        item = list_items[item_id]\r\n    except KeyError:\r\n        self.set_status(404)\r\n        self.finish(\"Not found\")\r\n        return\r\n    if item:\r\n        item['text'] = text\r\n    self.set_status(200)\r\n    self.finish(\"OK\")\r\n    return\r\n```\r\n\r\nThe `item_id` is already provided as a path argument. We only need to extract the `text` data from the request body by calling `self.get_body_argument` method.\r\n\r\nTo do a little error handling, we will try to get the item data from the `list_items` dictionary, while catching `KeyError`.\r\n\r\nIf `KeyError` is raised, then we will return a status of `404` and message `Not found` to inform the client of the error.\r\n\r\nIf the item is found, then we just overwrite the `text` value.\r\n\r\nAt the end of it, we will return a status of `200` and message `OK` to inform the client that the edit is done.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Importing Javascript\r\n\r\nWe can write plain Javascript for the AJAX calls, but I decide that it is best to use existing libraries to make our life easier.\r\n\r\nWe will use jQuery to help with handling the AJAX calls, so we will include this following code in the `list.html` file.\r\n\r\n```\r\n<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\" integrity=\"sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=\" crossorigin=\"anonymous\"></script>\r\n```\r\n\r\nWe will add this `<script>` tag at the end of the page so that it does not slow down the page loading.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Edit Template\r\n\r\nThen, we will need to cater for editing by changing the `list.html` file. Previously we have a simple `<span>{{ items[item_id]['text'] }}</span>` to display the item text. Now we need to make it editable.\r\n\r\n```\r\n<span><input type=\"hidden\" id=\"edit-item-{{ item_id }}-id\" value=\"{{ item_id }}\"><input type=\"text\" id=\"edit-item-{{ item_id }}-text\" name=\"text\" value=\"{{ items[item_id]['text'] }}\"><a href=\"#\" id=\"edit-item-{{ item_id }}-submit\" class=\"button edit-button\">Edit</a></span>\r\n```\r\n\r\nWe have added a hidden field to store the `item_id`, put the item text in a text input field and created a link to submit the edit action.\r\n\r\nNote that we have created a unique ID for each input field as there may be multiple of such fields in the same list.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## AJAX\r\n\r\nNow we have the fields ready, we need to add in the logic to send the data to the server.\r\n\r\nBelow the `<script>` tag that imports the jQuery source, we will create our customized Javascript that will perform the AJAX call.\r\n \r\n```\r\n<script type=\"text/javascript\">\r\n<script type=\"text/javascript\">\r\n$(document).ready(function() {\r\n    $('.edit-button').click(function() {\r\n        var itemSpan = $(this).parent();\r\n        var itemId = $(itemSpan).find(\"input[type='hidden']\").val();\r\n        var text = $(itemSpan).find(\"input[name='text']\").val();\r\n        var url = \"/list/\" + itemId + \"/edit\";\r\n        console.log(url);\r\n        $.ajax({\r\n            type: \"PUT\",\r\n            url: url,\r\n            dataType: \"json\",\r\n            data: {\"id\": itemId, \"text\": text},\r\n            statusCode: {\r\n                200: function(xhr) {\r\n                    alert(\"Item updated successfully\");\r\n                },\r\n                404: function(xhr) {\r\n                    alert(\"Item ID not found\");\r\n                },\r\n            },\r\n        });\r\n    });\r\n});\r\n</script>\r\n```\r\n\r\nThere is quite a lot going on in this segment of code.\r\n\r\nFirst, we attach the `click` event to all the elements with the class `edit-button`. In this case, it will be all the `<a>` tags for each list item.\r\n\r\nOnce the `click` event is triggered, we will try to extract the data we require.\r\n\r\nWe get the parent `<span>` containing the `<a>` being clicked. This allows us to extract the element containing the `item_id` and `text` of the item.\r\n\r\nOnce we have these data, we can now construct the URL and data for the AJAX call.\r\n\r\nSince we have defined a `put` method in the `ListHandler` to handle the edit function, we will set the call type to `PUT`. The data will be sent as a `json` data type and the data itself is constructed using the values from the input fields.\r\n\r\nOnce the server returns a response, we will display an alert to inform the status.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Persistent Storage\r\n\r\nSo far we have been using a in-memory storage for our list items. For this application to be useful, we need to persist the list data so that users can re-visit the list another day and the data will still be available.\r\n\r\nNow we will look at how to integrate persistent storage in the application.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## pymongo\r\n\r\nThere are a few databases that we can use for our application. I have chosen [MongoDB](https://www.mongodb.org/) for the simple reason that I want to learn how to use a NoSQL database. Please visit the official docs to learn how to setup a MongoDB instance on your machine for testing purpose.\r\n\r\nIn order to use Tornado with MongoDB, we need to have a database driver called [pymongo](http://api.mongodb.org/python/current/index.html).\r\n\r\nWe will add `pymongo==3.2.2` to our `requirements.txt` file so that we can install the module using pip.\r\n\r\nAfter adding this line, don't forget to run the command `pip install -r requirements.txt` so that the pymongo package is installed.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Setting Up Database\r\n\r\nAfter installing MongoDB and pymongo, we need to setup the database for our application's use.\r\n\r\nWe create a new database called `coloredlistdb` and create a new collection `lists`.\r\n\r\nFirst, we run the `mongo` command to enter the MongoDB shell.\r\n\r\n```\r\n> mongo\r\nMongoDB shell version: 3.2.5\r\nconnecting to: test\r\nWelcome to the MongoDB shell.\r\nFor interactive help, type \"help\".\r\nFor more comprehensive documentation, see\r\n    http://docs.mongodb.org/\r\nQuestions? Try the support group\r\n    http://groups.google.com/group/mongodb-user\r\n```\r\n\r\nAt this point, there is no database created yet, so we run the following command to initialize a database for `coloredlistdb`.\r\n\r\n```\r\n> use coloredlistdb\r\nswitched to db coloredlistdb\r\n```\r\n\r\nWe will create a new collection to store our list items by running the following command.\r\n\r\n```\r\n> db.createCollection(\"lists\")\r\n{ \"ok\" : 1 }\r\n```\r\n\r\nWe also initialize some data in the collection so that our application will display some items on first run.\r\n\r\n```\r\n> db.lists.insert({\r\n... text:'Walk the dog',\r\n... color:'Red'\r\n... })\r\nWriteResult({ \"nInserted\" : 1 })\r\n> db.lists.insert({\r\n... text:'Pick up dry cleaning',\r\n... color:'Blue'\r\n... })\r\nWriteResult({ \"nInserted\" : 1 })\r\n> db.lists.insert({\r\n... text:'Milk',\r\n... color:'Green'\r\n... })\r\nWriteResult({ \"nInserted\" : 1 })\r\n```\r\n\r\nTo verify all the items have been inserted, we run the following command:\r\n\r\n```\r\n> db.lists.find()\r\n{ \"_id\" : ObjectId(\"57220c6dcbe425b0c391538e\"), \"text\" : \"Walk the dog\", \"color\" : \"Red\" }\r\n{ \"_id\" : ObjectId(\"57220ccfcbe425b0c391538f\"), \"text\" : \"Pick up dry cleaning\", \"color\" : \"Blue\" }\r\n{ \"_id\" : ObjectId(\"57220cdccbe425b0c3915390\"), \"text\" : \"Milk\", \"color\" : \"Green\" }\r\n```\r\n\r\nNotice that we have changed the data structure for list item. A MongoDB collection is analogous to a RDBMS table, each collection contains multiple documents, which is in turn analagous to RDBMS table rows. In MongoDB, each document is represented similar to JSON object.\r\n\r\nFor the purpose of our list items, we will define our data structure as follows:\r\n\r\n```\r\n{\r\n    \"_id\" : item_id,\r\n    \"text\" : item_text,\r\n    \"color\" : item_color\r\n}\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Make Database\r\n\r\nWe can now start using the database from the application itself.\r\n\r\nFirst of all, we need to import the required modules to use the pymongo driver.\r\n\r\n```\r\nfrom pymongo import MongoClient\r\nfrom bson.objectid import ObjectId\r\n```\r\n\r\nWe are going to use the `ObjectId` class for setting the item ID, so we can remove the `import uuid` statement.\r\n\r\nThen we create a method to initialize the database and return the database object.\r\n\r\n```\r\ndef create_db():\r\n    client = MongoClient(\"localhost\",27017)\r\n    db = client['coloredlistdb']\r\n    return db\r\n```\r\n\r\nIn this method, we create a `MongoClient` that connects to `localhost` port `27017`.\r\n\r\nThen we get the database of the name `coloredlistdb` as we have created earlier.\r\n\r\nWe will pass the database object to various request handlers for data storage and retrieval.\r\n\r\nSince we create our URLSpec in the `make_app` method, we will pass the database object to the method in the main code.\r\n\r\n```\r\nif __name__ == '__main__':\r\n    db = create_db()\r\n    app = make_app(db)\r\n```\r\n\r\nInside the `make_app` method, we will pass the database object to each URLSpec as follows:\r\n\r\n```\r\ndef make_app(db):\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n        url(r\"/list/create\", ListHandler, dict(db=db)),\r\n        url(r\"/list\", ListHandler, dict(db=db)),\r\n    ],\r\n    debug=True)\r\n```\r\n\r\nThen inside the `ListHandler` class, we need to add a `initialize` method to accept the database object and assign to its own `db` variable.\r\n\r\n```\r\ndef initialize(self, db):\r\n    self.db = db\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Using Database\r\n\r\nSince now that we have the database object in the `ListHandler`, we no longer use the in-memory storage.\r\n\r\nInstead, we will get the list by calling `self.db['lists']`.\r\n\r\nWe will need to update all `get`, `post`, `put` and `delete` methods to use this database object.\r\n\r\n```\r\ndef get(self):\r\n    list_items = self.db['lists']\r\n    items = [item for item in list_items.find()]\r\n    self.render(\"list.html\", items=items)\r\n\r\ndef post(self):\r\n    list_items = self.db['lists']\r\n    text = self.get_body_argument(\"text\")\r\n    list_items.insert_one({'text':text, 'color':'Blue'})\r\n    self.redirect(\"/list\")\r\n\r\ndef put(self, item_id):\r\n    list_items = self.db['lists']\r\n    text = self.get_body_argument(\"text\")\r\n    item = list_items.find_one({'_id':ObjectId(item_id)})\r\n    if item:\r\n        list_items.update_one({'_id':ObjectId(item_id)}, {'$set':{'text':text}})\r\n        self.set_status(200)\r\n        self.finish(\"OK\")\r\n        return\r\n    else:\r\n        self.set_status(404)\r\n        self.finish(\"Not found\")\r\n        return\r\n\r\ndef delete(self, item_id):\r\n    list_items = self.db['lists']\r\n    item = list_items.find_one({'_id':ObjectId(item_id)})\r\n    if item:\r\n        list_items.remove({'_id':ObjectId(item_id)})\r\n        self.set_status(200)\r\n        self.finish(\"OK\")\r\n        return\r\n    else:\r\n        self.set_status(404)\r\n        self.finish(\"Not found\")\r\n        return\r\n```\r\n\r\nLet's break it down a little and explain some of the new code.\r\n\r\nIn the `get` method, we get the collection object by calling `self.db['lists']`. To retrieve the documents, we need to get a cursor to the dataset by calling `list_items.find`, which is like a iterator to the documents. We use list comprehension construct `[item for item in list_items.find()]` to collect the documents into a list that can be used to render the `list.html` page.\r\n\r\nFor the `post` method, we will call the list_items.insert_one` method, passing in the dictionary containing the item text and color as parameter. The `_id` field will be automatically generated.\r\n\r\nFor the `put` method, we will first call `list_items.find_one` and pass in the `ObjectId(item_id)` as the query filter. This will return us only one result or none. If the result is not none, then we will update the collection and setting a new `text value for the document with `_id` `ObjectId(item_id)`.\r\n\r\nFinally in the `delete` method, similar to the `put` method, we first query the collection to get the document with the same `ObjectId(item_id)`, then we simply call `list_items.remove` to delete the document from the collection.\r\n\r\nNotice that we cannot simply pass the plain `item_id` string as the `_id` value, instead, we need to create a new `ObjectId` object with the `item_id`.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## List Template with New Data Structure\r\n\r\nSince we have changed the data structure of the list item, we also need to update the list view to reflect the changes.\r\n\r\n```\r\n{% for item in items %}\r\n    <li class=\"{{ item['color'] }}\">\r\n        <span><input type=\"hidden\" id=\"edit-item-{{ item['_id'] }}-id\" value=\"{{ item['_id'] }}\"><input type=\"text\" id=\"edit-item-{{ item['_id'] }}-text\" name=\"text\" value=\"{{ item['text'] }}\"><a href=\"#\" id=\"edit-item-{{ item['_id'] }}-submit\" class=\"button edit-button\">Edit</a><a href=\"#\" id=\"delete-item-{{ item['_id'] }}-submit\" class=\"button delete-button\">Delete</a></span>\r\n    </li>\r\n{% end %}\r\n```\r\n\r\nInstead of iterating through the IDs as in the earlier version, we now can iterate through the list of items directly.\r\n\r\nTo access the `text` and `value` attributes, we just call `item['text']` or `item['color']`.\r\n\r\nPreviously, we have not included the `Delete` function. Now we will add the AJAX call for deleting the item. It is similar in structure to the edit AJAX call, except that here we are using type `DELETE` and there is no need to send any data in the request.\r\n\r\n```\r\n$('.delete-button').click(function() {\r\n    var itemSpan = $(this).parent();\r\n    var itemId = $(itemSpan).find(\"input[type='hidden']\").val();\r\n    var text = $(itemSpan).find(\"input[name='text']\").val();\r\n    var url = \"/list/\" + itemId + \"/delete\";\r\n    console.log(url);\r\n    $.ajax({\r\n        type: \"DELETE\",\r\n        url: url,\r\n        dataType: \"json\",\r\n        data: {},\r\n        statusCode: {\r\n            200: function(xhr) {\r\n                alert(\"Item deleted successfully\");\r\n                window.location.href = \"/list\";\r\n            },\r\n            404: function(xhr) {\r\n                alert(\"Item ID not found\");\r\n            },\r\n        },\r\n    });\r\n});\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Structuring the App\r\n\r\nNow we have a functional app where we can list items, add new item, edit and remove existing item.\r\n\r\nHowever, the current structure is not the most ideal one. We have embedded Javascript directly in the `list.html` file, which makes it more difficult to maintain, and we cannot make use of caching to make our page load faster.\r\n\r\nIdeally, we want to separate HTML, Javascript and CSS scripts into separate files, so that the browsers can cache unchanged `.js` and `.css` files, making page loading faster.\r\n\r\nIn the following sections, we will go through how to separate our Javascripts from the HTML pages.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Static Content\r\n\r\nIt is a common practice to create a `static` directory, containing `js`, `css` and `img` sub-directories. Each of these directories will contain Javascript, CSS and image files.\r\n\r\nThen inside our HTML page, we will include them by using tags like `<script src=\"\"></script>` for Javascript and `<link href=\"\">` for CSS.\r\n\r\nFor our app, we will create `static` in the same directory as `app.py`, and contain `js`, `css` and `img` sub-directories like this:\r\n\r\n```\r\n+-- coloredlist/\r\n|   +-- app.py\r\n|   +-- static/\r\n|   |   +-- css/\r\n|   |   +-- img/\r\n|   |   +-- js/\r\n```\r\n\r\nThen, we will create a new file `list.js` under the `static/js` directory, and extract the Javascript from `list.html` into this new file.\r\n\r\n### `list.js`\r\n\r\n```\r\n$(document).ready(function() {\r\n    $('.edit-button').click(function() {\r\n        var itemSpan = $(this).parent();\r\n        var itemId = $(itemSpan).find(\"input[type='hidden']\").val();\r\n        var text = $(itemSpan).find(\"input[name='text']\").val();\r\n        var url = \"/list/\" + itemId + \"/edit\";\r\n        console.log(url);\r\n        $.ajax({\r\n            type: \"PUT\",\r\n            url: url,\r\n            dataType: \"json\",\r\n            data: {\"id\": itemId, \"text\": text},\r\n            statusCode: {\r\n                200: function(xhr) {\r\n                    alert(\"Item updated successfully\");\r\n                },\r\n                404: function(xhr) {\r\n                    alert(\"Item ID not found\");\r\n                },\r\n            },\r\n        });\r\n    });\r\n    $('.delete-button').click(function() {\r\n        var itemSpan = $(this).parent();\r\n        var itemId = $(itemSpan).find(\"input[type='hidden']\").val();\r\n        var text = $(itemSpan).find(\"input[name='text']\").val();\r\n        var url = \"/list/\" + itemId + \"/delete\";\r\n        console.log(url);\r\n        $.ajax({\r\n            type: \"DELETE\",\r\n            url: url,\r\n            dataType: \"json\",\r\n            data: {},\r\n            statusCode: {\r\n                200: function(xhr) {\r\n                    alert(\"Item deleted successfully\");\r\n                    window.location.href = \"/list\";\r\n                },\r\n                404: function(xhr) {\r\n                    alert(\"Item ID not found\");\r\n                },\r\n            },\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n### `list.html`\r\n\r\n```\r\n<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\" integrity=\"sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=\" crossorigin=\"anonymous\"></script>\r\n<script src=\"{{ static_url('js/list.js') }}\"></script>\r\n```\r\n\r\nNotice that we are using `static_url()` for the `list.js` URL formation, which will return the `list.js` relative to the static file path defined in our application as follows:\r\n\r\n```\r\ndef make_app(db):\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n        url(r\"/list/create\", ListHandler, dict(db=db)),\r\n        url(r\"/list\", ListHandler, dict(db=db)),\r\n    ],\r\n    debug=True,\r\n    static_path=os.path.join(os.path.dirname(__file__), \"static\"))\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Template Inheritance\r\n\r\nPreviously we made a note about template inheritance when we were making the list page. Now we have finally come to this part where we are going to make some base templates that can be extended by various pages.\r\n\r\nFirst of all, we need to create a new directory `templates` in the same directory as `app.py`. Then we need to inform our application to load templates from the `templates` directory through the `template_path` setting:\r\n\r\n```\r\ndef make_app(db):\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n        url(r\"/list/create\", ListHandler, dict(db=db)),\r\n        url(r\"/list\", ListHandler, dict(db=db)),\r\n    ],\r\n    debug=True,\r\n    static_path=os.path.join(os.path.dirname(__file__), \"static\"),\r\n    template_path=os.path.join(os.path.dirname(__file__), \"templates\"))\r\n```\r\n\r\nWe now create a new file called `base.html`. Basically what this file will contain is the entire HTML markup of `main.html` with some additions, and it will be the base of all our pages.\r\n\r\n```\r\n<!DOCTYPE html>    \r\n<html>\r\n<head>\r\n    <title>Colored List App</title>\r\n</head>\r\n<body>\r\n    <div id=\"page-wrap\">\r\n        <div id=\"header\">\r\n            <h1><a href=\"/\">Colored List App</a></h1>\r\n            <div id=\"control\">\r\n                <p><a href=\"/logout\" class=\"button\">Log Out</a>&nbsp;<a href=\"/account\" class=\"button\">Your Account</a></p>\r\n                <p><a href=\"/signup\" class=\"button\">Sign Up</a>&nbsp;<a href=\"/login\" class=\"button\">Log In</a></p>\r\n            </div>\r\n        </div>\r\n        <div id=\"ribbon\">\r\n            Reminders\r\n            <ul>\r\n                <li>Your list automatically saves</li>\r\n                <li>Double-click list items to edit them</li>\r\n            </ul>\r\n        </div>\r\n        <div id=\"main\">\r\n        {% block content %}\r\n        {% end %}\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n```\r\n\r\nUnder `<div id=\"main\">`, we add the Python expressions:\r\n\r\n```\r\n{% block content %}\r\n{% end %}\r\n```\r\n\r\nThis allow us to extend the `base.html` template and put various page contents within this `div`.\r\n\r\nWe also need to move our `main.html` and `list.html` into the newly created `templates` directory.\r\n\r\nNow we can extend `base.html` in `list.html` like this:\r\n\r\n```\r\n{% extends \"base.html\" %}\r\n{% block content %}\r\n<ul>\r\n{% for item in items %}\r\n    <li class=\"{{ item['color'] }}\">\r\n        <span><input type=\"hidden\" id=\"edit-item-{{ item['_id'] }}-id\" value=\"{{ item['_id'] }}\"><input type=\"text\" id=\"edit-item-{{ item['_id'] }}-text\" name=\"text\" value=\"{{ item['text'] }}\"><a href=\"#\" id=\"edit-item-{{ item['_id'] }}-submit\" class=\"button edit-button\">Edit</a><a href=\"#\" id=\"delete-item-{{ item['_id'] }}-submit\" class=\"button delete-button\">Delete</a></span>\r\n    </li>\r\n{% end %}\r\n</ul>\r\n\r\n<form action=\"/list/create\" method=\"post\">\r\n    <div>\r\n        <input type=\"text\" id=\"new-list-item-text\" name=\"text\">\r\n        <input type=\"submit\" id=\"new-item-submit\" value=\"Add\" class=\"button\">\r\n    </div>\r\n</form>\r\n\r\n<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\" integrity=\"sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=\" crossorigin=\"anonymous\"></script>\r\n<script src=\"{{ static_url('js/list.js') }}\"></script>\r\n{% end %}\r\n```\r\n\r\nFirst, we need to indicate that we are extending from `base.html` by the expression `{% extends \"base.html\" %}`.\r\n\r\nThen we indicate that we will extend the `{% block content %}` block by including our original `list.html` markup under `{% block content %}{% end %}` block.\r\n\r\nWhen we load our `/list` page, we will have all the markup from `base.html` including `<div class=\"header\">` and `<div class=\"ribbon\">`, followed by the `{% block content %}` block, which will include `<ul>` and `<form>`.\r\n\r\nFor `main.html`, since we have just basically migrated the entire markup into `base.html`, we can just extend `base.html` directly inside `main.html` like this:\r\n\r\n```\r\n{% extends \"base.html\" %}\r\n```\r\n\r\nThe advantage of template inheritance is that we don't need to copy-paste the header and footer everytime we create a new page with the same look-and-feel.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Handlers Module\r\n\r\nThe next thing we want to tackle here is `app.py`. Notice that it has grown in size pretty quickly even though have just started with 2 handlers. We want to make it easily maintainable, so we should start separating different handlers into their rightful places.\r\n\r\nFirst, we need to create a new directory `handlers` in the same directory as `app.py`. Then we create `__init__.py` in `handlers` to indicate that it should be a `import`-able module.\r\n\r\nWe will migrate `class MainHandler` and `class ListHandler` into separate files, `main.py` and `list.py` respectively inside `handlers` directory.\r\n\r\nWhat we have will be like this:\r\n\r\n### `main.py`\r\n\r\n```\r\nimport tornado.web\r\n\r\n\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        self.render(\"main.html\")\r\n```\r\n\r\n### `list.py`\r\n\r\n```\r\nimport tornado.web\r\nfrom bson.objectid import ObjectId\r\n\r\n\r\nclass ListHandler(tornado.web.RequestHandler):\r\n    def initialize(self, db):\r\n        self.db = db\r\n\r\n    def get(self):\r\n        # ommitted for simplicity\r\n\r\n    def post(self):\r\n        # ommitted for simplicity\r\n\r\n    def put(self, item_id):\r\n        # ommitted for simplicity\r\n\r\n    def delete(self, item_id):\r\n        # ommitted for simplicity\r\n```\r\n\r\nSince we have extracted these 2 classes out of `app.py`, we need to tell the main application where to get the 2 handlers. For that, we need to import the 2 handlers from the newly created `handlers` module like this:\r\n\r\n```\r\nfrom handlers.main import MainHandler\r\nfrom handlers.list import ListHandler\r\n```\r\n\r\nWe don't need to change anything about the URLSpec definitions in creating the `tornado.web.Application` object.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## App Settings\r\n\r\nOur app is starting to look more structured than when we first started building it. We want to take a step further and make it more easily configurable by extracting all settings into a separate file called `settings.py`, which we will craete under the same directory as `app.py`.\r\n\r\n```\r\nimport os\r\nfrom tornado.options import define, options\r\n\r\n\r\n# Define file paths\r\nROOT = os.path.join(os.path.dirname(__file__))\r\nSTATIC_ROOT = os.path.join(ROOT, \"static\")\r\nTEMPLATE_ROOT = os.path.join(ROOT, \"templates\")\r\n\r\n\r\n# Define global options\r\ndefine(\"port\", default=9080, help=\"server port\", type=int)\r\ndefine(\"debug\", default=True, help=\"debug mode\")\r\ndefine(\"dbhost\", default=\"localhost\", help=\"db host\")\r\ndefine(\"dbport\", default=27017, help=\"db port\", type=int)\r\ndefine(\"dbname\", default=\"coloredlistdb\", help=\"name of db\")\r\n\r\n\r\n# Define application settings\r\nsettings = {}\r\nsettings['debug'] = options.debug\r\nsettings['static_path'] = STATIC_ROOT\r\nsettings['template_path'] = TEMPLATE_ROOT\r\n```\r\n\r\nIn the newly created `settings.py` file, we will define the `STATIC_ROOT` and `TEMPLATE_ROOT` variables to be used in the application settings for `static_path` and `template_path` respectively.\r\n\r\nWe also make use of `tornado.options.options`, which is a global options object, to store certain options like `port` and `dbhost` etc by calling the `define` function.\r\n\r\nSince we have extracted all the settings and options into a separate file, we need to tell our application how to load these settings and options. In our `app.py` file, we will need to import the `settings` object and `tornado.options.options` object:\r\n\r\n```\r\nfrom settings import settings\r\nfrom tornado.options import options\r\n```\r\n\r\nThen we can make use of the settings and options like this:\r\n\r\n```\r\ndef create_db():\r\n    client = MongoClient(options.dbhost, options.dbport)\r\n    db = client[options.dbname]\r\n    return db\r\n\r\ndef make_app(db):\r\n    return tornado.web.Application([\r\n        url(r\"/\", MainHandler),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n        url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n        url(r\"/list/create\", ListHandler, dict(db=db)),\r\n        url(r\"/list\", ListHandler, dict(db=db)),\r\n    ],\r\n    **settings)\r\n\r\nif __name__ == '__main__':\r\n    db = create_db()\r\n    app = make_app(db)\r\n    app.listen(options.port)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\nBy separating the settings and options from our application, we can make changes to the settings and options without having to change the `app.py` directly. It gives us the flexibility to deploy the application on different servers and using different databases by just dealing with `settings.py` file.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## DB Settings\r\n\r\nSince I've mentioned about using different databases for our app, we might as well make our app database-independent, meaning we shouldn't be tied to using only MongoDB, but have the option to use MySQL or PostgreSQL or whichever database deemed appropriate. For this, we have to restructure how we define our `db` object. Instead of creating the `db` object inside `app.py`, we will create a separate `db.py` under the same directory as `app.py`, where we will create a `db` object for our application's use.\r\n\r\n```\r\nfrom pymongo import MongoClient\r\nfrom tornado.options import options\r\n\r\n\r\ndef create_db():\r\n    client = MongoClient(options.dbhost, options.dbport)\r\n    db = client[options.dbname]\r\n    return db\r\n    \r\ndb = create_db()\r\n```\r\n\r\nThen, we will remove the `create_db` function from `app.py`, and instead do a import of the `db` object:\r\n\r\n```\r\nfrom db import db\r\n```\r\n\r\nWe can also remove the call to `create_db` in our main code:\r\n\r\n```\r\nif __name__ == '__main__':\r\n    app = make_app()\r\n    app.listen(options.port)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\nWe are not yet ready to be database-independent, but we will come to creating a database wrapper in a while.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## URL Patterns\r\n\r\nHonestly, I still haven't figured out why it is best practice to put URLs into a separate file. I guess it is probably for maintainability reasons. Personally I would also prefer defining the URLs separately from the main application, so that the `app.py` file will look clean and lean.\r\n\r\nWe will create a new `urls.py` file under the same directory as `app.py`. It will just contain our URLSpecs as follows:\r\n\r\n```\r\nfrom tornado.web import url\r\nfrom handlers.main import MainHandler\r\nfrom handlers.list import ListHandler\r\nfrom db import db\r\n\r\n\r\nurl_patterns = [\r\n    url(r\"/\", MainHandler),\r\n    url(r\"/list/([0-9a-zA-Z\\-]+)/edit\", ListHandler, dict(db=db)),\r\n    url(r\"/list/([0-9a-zA-Z\\-]+)/delete\", ListHandler, dict(db=db)),\r\n    url(r\"/list/create\", ListHandler, dict(db=db)),\r\n    url(r\"/list\", ListHandler, dict(db=db)),\r\n]\r\n```\r\n\r\nSince we have extracted the URLs from `app.py`, we no longer need to import `db` and `handlers` in `app.py`, and the file should look like this now:\r\n\r\n```\r\nimport tornado.ioloop\r\nimport tornado.web\r\nfrom settings import settings\r\nfrom tornado.options import options\r\nfrom urls import url_patterns\r\n\r\n\r\ndef make_app():\r\n    return tornado.web.Application(url_patterns, **settings)\r\n\r\n\r\nif __name__ == '__main__':\r\n    app = make_app()\r\n    app.listen(options.port)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Final Structure\r\n\r\nAt the end of all the restructuring, we should have achieved our desired structure for the application:\r\n\r\n```\r\n+-- coloredlist/\r\n|   +-- app.py\r\n|   +-- db.py\r\n|   +-- settings.py\r\n|   +-- urls.py\r\n|   +-- handlers/\r\n|   |   +-- __init__.py\r\n|   |   +-- list.py\r\n|   |   +-- main.py\r\n|   +-- static/\r\n|   |   +-- css/\r\n|   |   +-- img/\r\n|   |   +-- js/\r\n|   |   |   +-- list.js\r\n|   +-- templates/\r\n|   |   +-- base.html\r\n|   |   +-- list.html\r\n|   |   +-- main.html\r\n```\r\n\r\nThis may not be the best structure for a Tornado app, but we will improve on it as we add in more advanced features.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# Styling the App\r\n\r\nSince this is mainly a Tornado tutorial, I'm not going to focus much on styling the app. My purpose here is just to learn how to incorporate CSS files into my templates, so I'm going to take almost every CSS defined from the [sample](https://css-tricks.com/app-from-scratch-4-html-css/) and tweak such that there is no loading errors.\r\n\r\nThe end product is not going to look very nice, but that's really not our main concern here.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Basic CSS\r\n\r\nRemember we have created our `static/css` folder earlier? Now we can put it into some use. Inside the directory, we will create 3 files, `main.css`, `list.css` and `sidebar.css`.\r\n\r\n### `main.css`\r\n\r\nDue to the file being quite loaded, I'm going to just extract a few lines here. For the complete CSS file, please refer to the source code.\r\n\r\n```\r\n* { margin: 0; padding: 0; }\r\nbody { font: 14px/1.1 Helvetica, Sans-Serif; }\r\n.clear { clear: both; }\r\nimg, a img { border: none; }\r\ninput { outline: none; }\r\n```\r\n\r\n### `list.css`\r\n\r\n```\r\n#list { list-style: none; }\r\n#list li { position: relative; margin: 0 0 8px 0; padding: 0 0 0 70px; width: 607px; }\r\n#list li span { padding: 2px; -moz-border-radius: 5px; -webkit-border-radius: 5px; width: 589px; display: block; position: relative; }\r\n```\r\n\r\n### `sidebar.css`\r\n\r\n```\r\n#ribbon { position: absolute; right: 0; width: 125px; padding: 60px 30px 0 47px; height: 756px; top: -6px; }\r\n\r\n#ribbon ul { list-style: none; }\r\n#ribbon ul li { background: rgba(0,0,0,0.8); color: white; padding: 5px; margin: 0 0 5px 0; font-size: 12px; }\r\n```\r\n\r\nThen, we need to import the CSS files within the HTML templates like this:\r\n\r\n### `base.html`\r\n\r\n```\r\n<head>\r\n    <title>Colored List App</title>\r\n    <link rel=\"stylesheet\" href=\"{{ static_url('css/main.css') }}\">\r\n    <link rel=\"stylesheet\" href=\"{{ static_url('css/sidebar.css') }}\">\r\n</head>\r\n```\r\n\r\n### `list.html`\r\n\r\n```\r\n{% block content %}\r\n<link rel=\"stylesheet\" href=\"{{ static_url('css/list.css') }}\">\r\n<ul id=\"list\">\r\n...\r\n</ul>\r\n<form id=\"add-new\" action=\"/list/create\" method=\"post\">\r\n    <div>\r\n        <input type=\"text\" id=\"new-list-item-text\" name=\"text\">\r\n        <input type=\"submit\" id=\"new-item-submit\" value=\"Add\" class=\"button\">\r\n    </div>\r\n</form>\r\n{% end %}\r\n```\r\n\r\nNote that for `list.html`, we have added an `id` attribute for the list `ul` element and `form` element. This is so that we can style them using our newly created stylesheets.\r\n\r\nNow our app should have basic styling, although it most likely isn't very pleasant.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# User Authentication\r\n\r\nNotice that all this while we have been freely accessing our list without having to login at all. In this age where security is a concern, no one would use our app if it does not have any form of authentication. Now, we will start building in user authentication feature for our app.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Login Form\r\n\r\nFirst of all, we will define our login form. It will be a simple form, with username and password fields.\r\n\r\n```\r\n{% extends \"base.html\" %}\r\n{% block content %}\r\n<form action=\"/login/submit\" method=\"post\">\r\n    <div>\r\n        <input type=\"text\" name=\"username\" id=\"username\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"password\" name=\"password\" id=\"password\">\r\n        <label for=\"password\">Password</label>\r\n    </div>\r\n    <input type=\"submit\" id=\"login-submit\" value=\"Login\" class=\"button\">\r\n</form>\r\n{% end %}\r\n```\r\n\r\nWe will extend our `base.html` template and define the login form within `{% block content %}`.\r\n\r\nThere is nothing special about this form. We specify the action `/login/submit`, and will send the request as a `POST` request.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Login and Logout Handlers\r\n\r\nWe need to create handlers for our login form. We will create a new file `auth.py` under `handlers` directory, and create `class LoginHandler` inside the handler.\r\n\r\nWe will have a `get` function to handle `GET` request and `post` function to handle `POST` request. The `get` function will simply return our `login.html` form. When the login form sends a `POST` request, the `post` function will take the `username` from the request argument by calling `self.get_argument(\"username\")`. We will set this username in our session cookie with `user` key, then redirect to the `/list` URL to display the list view.\r\n\r\nFor the time being, we will omit password authentication as this will require searching through the persistent datastore.\r\n\r\n```\r\nimport tornado.web\r\nimport json\r\n\r\n\r\nclass LoginHandler(tornado.web.RequestHandler):\r\n    def initialize(self, db):\r\n        self.db = db\r\n\r\n    def get(self):\r\n        self.render(\"login.html\")\r\n\r\n    def post(self):\r\n        self.set_secure_cookie(\"user\", self.get_argument(\"username\"))\r\n        self.redirect(\"/list\")\r\n```\r\n\r\nFor every authentication feature, there will be a logout function as well. We will then define another `class LogoutHandler` under `auth.py`.\r\n\r\n```\r\nclass LogoutHandler(tornado.web.RequestHandler):\r\n    def initialize(self, db):\r\n        self.db = db\r\n\r\n    def post(self):\r\n        response = {}\r\n        if self.get_secure_cookie(\"user\"):\r\n            self.set_secure_cookie(\"user\", \"\")\r\n            response['status'] = 200\r\n            response['redirectUrl'] = \"/login\"\r\n            self.write(json.dumps(response))\r\n        else:\r\n            response['status'] = 400\r\n            response['errorMsg'] = \"User not in session\"\r\n            response['redirectUrl'] = \"/login\"\r\n            self.write(json.dumps(response))\r\n```\r\n\r\nBasically, we will remove the user from our session cookie by setting the `user` key value to empty. Then we will create a response dictionary with `status=200` and `redirectUrl=/login`. However, if with any reason the user is no longer in session, we will return `status=400` with `errorMsg=User not in session` and `redirectUrl=/login`.\r\n\r\nSince we now have an authentication feature, we must not forget to make sure our list page is *protected* against unauthenticated access. To do that, we have to modify our `MainHandler`'s `get` function as such:\r\n\r\n```\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    def get(self):\r\n        if not self.get_secure_cookie(\"user\"):\r\n            self.redirect(\"/login\")\r\n            return\r\n        self.redirect(\"/list\")\r\n```\r\n\r\nWhat this does is that it will first check whether there is any user in the session cookie, and redirect to `/login` if there is no user, or to `/list` if user is still in session. Of course this is not very secure, we should check whether the request comes from the same user in session, but we will leave that to a later stage.\r\n\r\nThis is all very messy code and we shall come back later to refactor it. By then, we will need to introduce the concept of a `BaseHandler`. Let's come to that at a later stage.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Authentication URL Patterns\r\n\r\nOnce we have created our `LoginHandler` and `LogoutHandler`, we can map the handlers to the respect URLs.\r\n\r\nInside our `urls.py` file, we will add a new `import` statement:\r\n\r\n```\r\nfrom handlers.auth import LoginHandler, LogoutHandler\r\n```\r\n\r\nThen, we will add the mapping as such:\r\n\r\n```\r\nurl(r\"/login\", LoginHandler, dict(db=db)),\r\nurl(r\"/login/submit\", LoginHandler, dict(db=db)),\r\nurl(r\"/logout\", LogoutHandler, dict(db=db)),\r\n```\r\n\r\nThis is very straightforward by now. We will let `LoginHandler` handle `/login` and `/login/submit` URLs and `LogoutHandler` handle `/logout` URL.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Authentication AJAX\r\n\r\nRemember we created a `Logout` button very early in our app development? We shall now put it into use.\r\n\r\nIn our `base.html`, we need to make a little change to our `Logout` button. Instead of calling `/logout` directly in the `a href` attribute, we need to use AJAX for the call, because `a href` only sends `GET` request.\r\n\r\n```\r\n<p><a href=\"#\" id=\"logout-btn\" class=\"button\">Log Out</a>&nbsp;<a href=\"/account\" class=\"button\">Your Account</a></p>\r\n```\r\n\r\nTo perform AJAX call, we will include the jQuery library and our `main.js` scripts at the bottom of `base.html`, before the closing `body` tag.\r\n\r\n```\r\n<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\" integrity=\"sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=\" crossorigin=\"anonymous\"></script>\r\n<script src=\"{{ static_url('js/main.js') }}\"></script>\r\n```\r\n\r\nThen inside `static/js` directory, we will create a new file for `main.js` and write our AJAX call.\r\n\r\n```\r\n$(document).ready(function() {\r\n    $('#logout-btn').click(function() {\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \"/logout\",\r\n            success: function(response) {\r\n                if (response) {\r\n                    response = JSON.parse(response);\r\n                    if (response.status == 200) {\r\n                        alert(response.errorMsg || \"Logged out successfully.\");\r\n                    } else {\r\n                        alert(response.errorMsg || \"Error logging out\");\r\n                    }\r\n                    window.location.href = response.redirectUrl;\r\n                }\r\n            }\r\n        });\r\n    }); \r\n});\r\n```\r\n\r\nWe will attach a AJAX call to the `click` event of our `logout-btn`. This should send a `POST` request to the `/logout` URL.\r\n\r\nOn success, we will check for the response, we will parse into a JSON object for processing.\r\n\r\nIf the `response.status` is `200`, we will prompt the `response.errorMsg` or `Logged out successfully`. Otherwise, we will prompt the `response.errorMsg` or `Error logging out`.\r\n\r\nIn both cases, we will redirect the browser to the `response.redirectUrl` given by the server.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Secret Cookie\r\n\r\nAt the end of all this, there is one very important thing that we need to do for this authentication feature to work. We have to define a secret cookie key in our application, which is used to sign our cookies to prevent forgery.\r\n\r\nThis part is a bit tricky. The secret cookie key is supposed to be set in our `settings.py` file, but our application is open source, and everyone can see the `settings.py` source code. This means everyone will see our secret cookie key, and can as easily forge a cookie.\r\n\r\nTo solve this problem, we will have to define one configuration file to store the secret cookie key, and this file should never be made public and will only live in our server. Let's call the file `config.conf`. This file will store our secret cookie key in the form of `cookie_secret = 'some long string of characters'`.\r\n\r\nThen our `settings.py` file will be modified to include reading the `config.conf` file and setting the `cookie_secret`:\r\n\r\n```\r\nimport tornado\r\nfrom tornado.options import define, options, parse_config_file \r\n```\r\n\r\nFirst we will make additional imports for `parse_config_file`.\r\n\r\n```\r\ndefine(\"cookie_secret\", default=None, help=\"secret cookie\")\r\ndefine(\"config\", default=\"config.conf\", help=\"secret config\")\r\n```\r\n\r\nThen we will define the `cookie_secret` and `config` options. We will not be setting the `cookie_secret` directly here, instead we will make use of `config.conf` to read the value.\r\n\r\n```\r\nif options.config:\r\n    if os.path.exists(options.config):\r\n        parse_config_file(options.config)\r\n```\r\n\r\nTo read the `config.conf` file, we will call the `parse_config_file` function, passing in the file name, which is defined in `options.config`.\r\n\r\n```\r\nsettings['cookie_secret'] = options.cookie_secret\r\n```\r\n\r\nFinally, once we have read the option from `config.conf`, we can set it to our `settings['cookie_secret']`, which will be passed to the `Application` object during creation.\r\n\r\nNow, our application is ready for authentication.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n# User Accounts\r\n\r\nBased on our user authentication feature earlier, it doesn't really authenticate anyone, as it just stores the username in session without checking against the database whether the password is matching. We shall now create the concept of user accounts, so that we will have a database of users to authenticate against for every login.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## New User Collection\r\n\r\nTo store user accounts in our database, we need to create a new collection called `users`. Let's start up our MongoDB client to create the collection.\r\n\r\n```\r\n> mongo\r\nMongoDB shell version: 3.2.6\r\nconnecting to: test\r\n> use coloredlistdb\r\nswitched to db coloredlistdb\r\n>\r\n```\r\n\r\nWe will call up the MongoDB shell using the `mongo` command. Then we switch to our database by `use coloredlistdb`.\r\n\r\n```\r\n> db.createCollection(\"users\")\r\n{ \"ok\" : 1 }\r\n>\r\n```\r\n\r\nWe will create a new collection to store our user accounts by running `db.createCollection(\"users\")`.\r\n\r\nNow we want create our first user account, let's make it the `admin` user. We are going to hash the password for this user, so we will need the help of the Python console. Let's call up `python`.\r\n\r\n```\r\n> python\r\nPython 3.5.1+ (default, Mar 30 2016, 22:46:26)\r\n[GCC 5.3.1 20160330] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import hashlib, pymongo\r\n>>> hashed_pass = hashlib.md5(\"admin\".encode(\"utf-8\")).hexdigest()\r\n>>> hashed_pass\r\n'21232f297a57a5a743894a0e4a801fc3'\r\n>>> client = pymongo.MongoClient(\"localhost\", 27017)\r\n>>> db = client.coloredlistdb\r\n>>> users = db.users\r\n>>> users.insert_one({'username': \"admin\", 'password': hashed_pass, 'is_active': True, 'is_admin': True})\r\n<pymongo.results.InsertOneResult object at 0x7fe0779c7dc8>\r\n>>>\r\n```\r\n\r\nIn the Python console, we `import hashlib` which deals with hashing. Then we pass in our password `password` into the `hashlib.md5` function, but before that, we need to encode our `password` string with `encode(\"utf-8\")`. Once the hash object is created, we call `hexdigest` to get the digest in hexadecimals digits. This is the string that we will use to store in the `users` collection.\r\n\r\nSince we are using the Python console to generate the hashed password, we might as well use it to insert the user into our database. We create a `MongoClient` and get the `users` collection from the `coloredlistdb`. Then we insert the `admin` user with the following details:\r\n\r\n```\r\n{'username': \"admin\", 'password': hashed_pass, 'is_active': True, 'is_admin': True}\r\n```\r\n\r\nAfter this, if we query the database from the MongoDB shell, we should find the document created.\r\n\r\n```\r\n> db.users.find()\r\n{ \"_id\" : ObjectId(\"572cbfceaeca133de672b178\"), \"is_admin\" : true, \"is_active\" : true, \"password\" : \"21232f297a57a5a743894a0e4a801fc3\", \"username\" : \"admin\" }\r\n>\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Create Account Form\r\n\r\nWe will now create a new account form so that potential users can sign up for an account and start using our app. We will create `account_create.html` under `templates` directory.\r\n\r\n```\r\n{% extends \"base.html\" %}\r\n{% block content %}\r\n<h2>create account</h2>\r\n<form action=\"/account/create/submit\" method=\"post\" id=\"account-create-form\">\r\n    <div>\r\n        <input type=\"text\" name=\"username\" id=\"username\">\r\n        <label for=\"username\">username</label>\r\n        <input type=\"password\" name=\"password\" id=\"password\">\r\n        <label for=\"password\">password</label>\r\n        <input type=\"password\" name=\"confirm-password\" id=\"confirm-password\">\r\n        <label for=\"confirm-password\">confirm password</label>\r\n        <input type=\"submit\" name=\"new-account-submit\" id=\"new-account-submit\" value=\"submit\" class=\"button\">\r\n    </div>\r\n</form>\r\n<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\" integrity=\"sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=\" crossorigin=\"anonymous\"></script>\r\n<script src=\"{{ static_url('js/account.js') }}\"></script>\r\n{% end %}\r\n```\r\n\r\nAs usual, we will `{% extends \"base.html\" %}` and write our new account form within `{% block content %}`. We will create 3 fields for our purpose: `username`, `password` and `confirm-password`. The purpose of the `confirm-password` field is just to make sure the user has typed in the correct password, which we will validate using Javascript from `js/account.js` that we include at the end. Our form will `post` to `/account/create/submit` if the validation is successful.\r\n\r\nWe also change our `base.html` template to use the `/acccount/create` URL for `Sign Up`:\r\n\r\n```\r\n<p><a href=\"/account/create\" class=\"button\">Sign Up</a>&nbsp;<a href=\"/login\" class=\"button\">Log In</a></p>\r\n```\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Create Account Script\r\n\r\nNow we create the Javascript that will handle the create account form submission. Create a new file `account.js` under `static/js` directory.\r\n\r\n```\r\n$(document).ready(function() {\r\n    $('#new-account-submit').click(function(e) {\r\n        if ($('#password').val() === $('#confirm-password').val()) {\r\n            $('#account-create-form').submit();\r\n        } else {\r\n            e.preventDefault();\r\n            alert('Password and Confirm Password do not match!');\r\n        }\r\n    });\r\n});\r\n```\r\n\r\nFor our Javascript, we will first take the `password` field value and match with `confirm-password` field value. If they match, we simply call `submit` function of the `account-create-form`.\r\n\r\nHowever, if they don't match, we need to specifically call `e.preventDefault` so that the form submission will not happen. Then, we need to alert the user with a prompt, so that he can change the 2 password fields and make sure they match. \r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## After Create Account\r\n\r\nWe will also create the views that are displayed after successfully creating an account, or when the account is not created, perhaps due to duplicate username. Let's call them `account_success.html` and `account_error.html`.\r\n\r\n### `account_success.html`\r\n\r\n```\r\n{% extends \"base.html\" %}\r\n{% block content %}\r\n<p>Your account has been created successfully. Please login at <a href=\"/login\">Login Page</a> to start creating your list!</p>\r\n{% end %}\r\n```\r\n\r\nThere is nothing special in this page. We just `{% extends \"base.html\" %}` and then tell the user the account is created, and point to the Login Page.\r\n\r\n### `account_error.html`\r\n\r\n```\r\n{% extends \"base.html\" %}\r\n{% block content %}\r\n<p>Error in creating your account. {% if reason %}{{ reason }}{% end %}</p>\r\n<p>Please try again <a href=\"/account/create\">here</a></p>\r\n{% end %}\r\n```\r\n\r\nFor the error page, there's an additional Python expression that checks for `reason` and display if it exists. Then we point to the New Account page again.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Create Account Handler and URL Mapping\r\n\r\nWe now create the handlers to handle the `get` and `post` requests of the account page, using a new file `account.py` under `handlers`.\r\n\r\n```\r\nimport tornado.web\r\nimport hashlib\r\n\r\n\r\nclass AccountHandler(tornado.web.RequestHandler):\r\n    def initialize(self, db):\r\n        self.db = db\r\n\r\n    def get(self):\r\n        self.render(\"account_create.html\")\r\n\r\n    def post(self):\r\n        username = self.get_body_argument(\"username\")\r\n        password = self.get_body_argument(\"password\")\r\n        if username and password:\r\n            users = self.db['users']\r\n            if users.find_one({'username': username}):\r\n                self.render(\"account_error.html\", reason=\"User already exists\")\r\n            else:\r\n                hashed_pass = hashlib.md5(password.encode(\"utf-8\")).hexdigest()\r\n                users.insert_one({'username': username, 'password': hashed_pass, 'is_admin': False, 'is_active': True})\r\n                self.render(\"account_success.html\")\r\n        else:\r\n            self.render(\"account_error.html\", reason=\"Invalid username or password\")\r\n```\r\n\r\nLet's break this down. For the `get` function, it is just to render the `account_create.html` template. For the `post` function, we will first get the arguments `username` and `password` by calling `self.get_body_argument`. This will return us the values entered into the create account form.\r\n\r\nWe should always check that the `username` and `password` are not empty, then we will try to check whether the `username` already exists by calling `find_one` from our `users` collection. If it already exists, we will render the `account_error.html` template and pass in the `reason`. Otherwise,  we will hash the password using the `md5` algorithm from `hashlib` module. It is required by the hashing algorithm to encode our string, so we will call `encode(\"utf-8\")` from the `password` string before passing it into the `md5` function. Finally, we get the hashed string by calling `hexdigest`, which will return us a string in hexadecimal digits. This hashed password together with the username will be inserted by calling `users.insert_one`. Note that we will set `is_admin` as `False` and `is_active` as `True` for the time being. Later when we add on an advanced feature to deal with locking user account, we can make use of the `is_active` attribute.\r\n\r\nFinally, if we check that both `username` and `password` are empty, we will render the `account_error.html` template and pass in the `reason`.\r\n\r\nThe URLs mapping will be defined in `urls.py` as such:\r\n\r\n```\r\nfrom handlers.account import AccountHandler\r\n```\r\n\r\nFirst, we import the `AccountHandler` from `handlers.account`.\r\n\r\n```\r\nurl(r\"/account/create\", AccountHandler, dict(db=db)),\r\nurl(r\"/account/create/submit\", AccountHandler, dict(db=db)),\r\n```\r\n\r\nThen we map `/account/create` and `/account/create/submit` to the `AccountHandler`.\r\n\r\n[Back to top](#table-of-contents)\r\n\r\n## Authenticate User with Password\r\n\r\nNow that we have created `password` in our user accounts, we can change our authentication logic to validate login password against the database.\r\n\r\nFirst, we need to make some changes to our `login.html` template.\r\n\r\n```\r\n{% extends \"base.html\" %}\r\n{% block content %}\r\n<form id=\"login-form\">\r\n    <div>\r\n        <input type=\"text\" name=\"username\" id=\"username\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"password\" name=\"password\" id=\"password\">\r\n        <label for=\"password\">Password</label>\r\n    </div>\r\n    <input type=\"submit\" id=\"login-submit\" value=\"Login\" class=\"button\">\r\n</form>\r\n<script src=\"https://code.jquery.com/jquery-2.2.3.min.js\" integrity=\"sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=\" crossorigin=\"anonymous\"></script>\r\n<script src=\"{{ static_url('js/login.js') }}\"></script>\r\n{% end %}\r\n```\r\n\r\n*It's worth noting that we are now moving towards using AJAX for form submit, because we want to implement a RESTful server that returns JSON response. We will only use `<a>` tag for getting rendered response. Let's start refactoring our code from the authentication module, and we will refactor the rest of the application whenever necessary.* \r\n\r\nWe have removed the `action` and `method` attributes of the `form`, instead, we will use AJAX to post the form data to the server, we are going to include the jQuery scripts and a new `js/login.js` file.\r\n\r\nIn the new `js/login.js` file, we will bind a function to the `login-submit` button's `click` event:\r\n\r\n```\r\n$(document).ready(function() {\r\n    $('#login-submit').click(function(e) {\r\n        e.preventDefault();\r\n        var username = $('#username').val();\r\n        var password = $('#password').val();\r\n        if (username && password) {\r\n            $.ajax({\r\n                type: \"POST\",\r\n                url: \"/login/submit\",\r\n                dataType: \"json\",\r\n                data: {\"username\":username, \"password\":password},\r\n                success: function(response) {\r\n                    if (response) {\r\n                        if (response.status != 200 && response.errorMsg) {\r\n                            alert(response.errorMsg || \"Unable to login\");\r\n                        }\r\n                        if (response.redirectUrl) {\r\n                            window.location.href = response.redirectUrl;\r\n                        }\r\n                    }\r\n                },\r\n            });\r\n        } else {\r\n            alert(\"Please enter both username and password\");\r\n        }\r\n    });\r\n});\r\n```\r\n\r\nSince we are not going to do the traditional form submit, we will need to prevent the form submission by calling `e.preventDefault`. Then, we will extract the `username` and `password` fields, check that they are not empty and make the AJAX call to `/login/submit` with the `username` and `password` as form data. Upon successful request, we will get the `response` object and check the `status` code. If it is not `200`, we will try to display the `errorMsg`. If a `redirectUrl` is provided, we will redirect our page to the given URL.\r\n\r\nWe also try to validate that the `username` and `password` fields are entered, so we will prompt an error message for failing to enter either field, and we will not attempt to post the login details in this case.\r\n\r\nNext, let's change our `handlers/auth.py` file to reflect the logic:\r\n\r\n```\r\nimport tornado.web\r\nimport json\r\nimport hashlib\r\n\r\n\r\nclass LoginHandler(tornado.web.RequestHandler):\r\n    # omitted code here\r\n    def get(self):\r\n        self.render(\"login.html\")\r\n\r\n    def post(self):\r\n        username = self.get_body_argument(\"username\")\r\n        password = self.get_body_argument(\"password\")\r\n        users = self.db['users']\r\n        response = {}\r\n        if username and password:\r\n            user = users.find_one({'username': username})\r\n            if user:\r\n                stored_pass = user['password']\r\n                hashed_pass = hashlib.md5(password.encode(\"utf-8\")).hexdigest()\r\n                if hashed_pass == stored_pass:\r\n                    self.set_secure_cookie(\"user\", username)\r\n                    response['status'] = 200\r\n                    response['redirectUrl'] = \"/list\"\r\n                    self.write(json.dumps(response))\r\n                else:\r\n                    response['status'] = 403\r\n                    response['errorMsg'] = \"Invalid username or password\"\r\n                    response['redirectUrl'] = \"/login\"\r\n                    self.write(json.dumps(response))\r\n            else:\r\n                response['status'] = 403\r\n                response['errorMsg'] = \"Invalid username or password\"\r\n                response['redirectUrl'] = \"/login\"\r\n                self.write(json.dumps(response))\r\n        else:\r\n            response['status'] = 403\r\n            response['errorMsg'] = \"Invalid username or password\"\r\n            response['redirectUrl'] = \"/login\"\r\n            self.write(json.dumps(response))\r\n```\r\n\r\nWe have a new `import hashlib` which will be in charge of hashing passwords.\r\n\r\nThere are quite a few changes in our `post` function. Now that we will validate the login username and password against the database, we will need to extract both fields from the request body by calling `self.get_body_argument`. We then get the `users` collection from `self.db`, and try to find the document with matching `username`. If the it is found, then we hash the `password` from the request body by using `hashlib.md5(password.encode(\"utf-8\")).hexdigest` function. If this hashed password matches the password from the database, then we can set the user in our session cookie by `self.set_secure_cookie(\"user\", username)`. For successful authentication, we return `response['status'] = 200` and `response['redirectUrl'] = \"/list\"`. To write the JSON response, we call `json.dumps(response)` and pass to `self.write`.\r\n\r\nIf the username or password is not provided, or if the username does not match any in our database, or if the password does not match, then we will return `response['status'] = 403`, `response['errorMsg'] = \"Invalid username or password\"` and `response['redirectUrl'] = \"/login\"`. `403` status code indicates `Forbidden`, and we provide a human-friendly error message `Invalid username or password`, then redirect the client back to `/login` URL.\r\n\r\nSince we are refactoring our authentication module, let's also do some housekeeping on our logout AJAX call to make it consistent with our login AJAX call.\r\n\r\n### `static/js/main.js`\r\n\r\n```\r\n$(document).ready(function() {\r\n    $('#logout-btn').click(function() {\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \"/logout\",\r\n            dataType: \"json\",\r\n            data: {},\r\n            success: function(response) {\r\n                if (response) {\r\n                    if (response.status != 200 && response.errorMsg) {\r\n                        alert(response.errorMsg || \"Error logging out\");\r\n                    }\r\n                    if (response.redirectUrl) {\r\n                        window.location.href = response.redirectUrl;\r\n                    }\r\n                }\r\n            },\r\n        });\r\n    }); \r\n});\r\n```\r\n\r\nThe logic is the same as before, only difference is that we specify the `dataType` to be `json` so that we don't have to `JSON.parse` the response. We also check that there is a `redirectUrl` and set the `window.location.href` accordingly.\r\n\r\n[Back to top](#table-of-contents)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}